{
  "info": {
    "_postman_id": "a4a73626-d959-0177-81ec-a8b83907436b",
    "name": "Nuvanz HR RESTful API",
    "description": "This collection contains all the endpoints for the nuvanz_hr RESTful API",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "c738837c-5bf5-a57d-6cba-90fc41bb4cb3",
      "name": "Authentication",
      "description": "",
      "item": [
        {
          "_postman_id": "db1db7a7-179b-ea84-9b27-35d56b3be2ee",
          "name": "/auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a767abd-ffb3-4894-8e9a-494426e27ddb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.environment.set(\"access_token\", jsonData.access_token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\",\n  \"password\": \"1234\"\n}"
            },
            "url": "{{url}}/auth"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "82ce3d51-121c-a3e6-3835-31995818c765",
      "name": "Organization Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "5490273f-c84d-52e0-f811-c9e80302dd31",
          "name": "/organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbc087f5-58d5-4010-bcc6-063de4e77b15",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.environment.set(\"organizationId\", jsonData.record.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organization_name\": \"test_o\", \n  \"is_active\": true\n}"
            },
            "url": "{{url}}/organization"
          },
          "response": []
        },
        {
          "_postman_id": "0f3d3798-cebb-1222-4777-fc1e63574fbc",
          "name": "/organization/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76aa8c17-13fe-44f7-ae06-62fb6ac031b5",
                "type": "text/javascript",
                "exec": [
                  "var organizationId = pm.environment.get(\"organizationId\");",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Organization returned is the one requested\", function() {",
                  "    pm.expect(jsonData.record.id).to.eql(organizationId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/organization/{{organizationId}}"
          },
          "response": []
        },
        {
          "_postman_id": "00ee23ed-5fe0-0186-caeb-ffd1cfb3e0ec",
          "name": "/organizations",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d7107b87-a452-4b1e-b212-0750c1038a4d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Organizations list contains two items\", function() {",
                  "    pm.expect(jsonData.list.length).to.eql(2);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/organizations"
          },
          "response": []
        },
        {
          "_postman_id": "2fcd3bdf-87c9-54ff-479e-3fe6cfc21386",
          "name": "/organization/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0835049-41bf-4c4b-bfa8-5bf8740f27a7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"organization_name\": \"new_test_o\",\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/organization/{{organizationId}}"
          },
          "response": []
        },
        {
          "_postman_id": "c744ab6a-b2f5-f53a-5cb6-326bdccdc57c",
          "name": "/organization/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c4646eb-2555-40df-9003-e1ce9d8fb75b",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/organization/{{organizationId}}"
          },
          "response": []
        },
        {
          "_postman_id": "f3c15a6f-c85c-e2f2-124e-6a0bbc2cc576",
          "name": "/activate_organization/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f6a59c7-6ad5-4bba-8d92-8785affd9da9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"is_active\": true\n}"
            },
            "url": "{{url}}/activate_organization/{{organizationId}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "c6c3433b-24f9-8881-bd1f-2bd41288a90c",
      "name": "User Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "6aafaba2-52da-2a93-ee67-686049a7f65f",
          "name": "/user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bcee1432-ad49-4a4b-825a-60476bd88fcd",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.environment.set(\"userId\", jsonData.record.id);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"test_u\", \n  \"password\": \"test_p\",\n  \"email\": \"test_u@test_o.com\",\n  \"organization_id\": {{organizationId}},\n  \"is_super\": true,\n  \"is_owner\": true,\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/user"
          },
          "response": []
        },
        {
          "_postman_id": "26777239-092c-5691-120b-a0a2e745b5ee",
          "name": "/user/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1b945b9c-3537-4078-a572-745d03445797",
                "type": "text/javascript",
                "exec": [
                  "var userId = pm.environment.get(\"userId\");",
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"User returned is the one requested\", function() {",
                  "    pm.expect(jsonData.record.id).to.eql(userId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/user/{{userId}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "00cc6e10-c74f-4fef-8abe-8b4d4c946cd8",
          "name": "/users",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b6123e92-fbd6-4b79-a4ea-1166328730d1",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Users list contains one item\", function() {",
                  "    pm.expect(jsonData.list.length).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/users"
          },
          "response": []
        },
        {
          "_postman_id": "1b92a9e9-e47a-d15d-130f-b5f094c60c8f",
          "name": "/user/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55d46f6e-8e8f-481f-b6c2-3c071fc4475c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"new_test_u\", \n  \"password\": \"1234\",\n  \"email\": \"new_test_u@test_o.com\",\n  \"organization_id\": {{organization_id}},\n  \"is_super\": true,\n  \"is_owner\": true\n}"
            },
            "url": "{{url}}/user/{{userId}}"
          },
          "response": []
        },
        {
          "_postman_id": "8dcad58b-d11f-6023-7291-f1ed766362d8",
          "name": "/user/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4559d65-31f8-45f6-9cbe-dd54728095a7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/user/{{userId}}"
          },
          "response": []
        },
        {
          "_postman_id": "95f7fbb8-4449-a9f9-3314-684955029c98",
          "name": "/activate_user/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c7aad97e-af7b-4abc-a76f-67d0cd189071",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"is_active\": true\n}"
            },
            "url": "{{url}}/activate_user/{{userId}}"
          },
          "response": []
        },
        {
          "_postman_id": "17928f30-6273-ce16-fa76-46acf0ed68d9",
          "name": "/auth (new_test_u)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a89025e8-65b4-437d-836d-707c4599d3e3",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.environment.set(\"access_token\", jsonData.access_token);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"new_test_u\",\n  \"password\": \"1234\"\n}"
            },
            "url": "{{url}}/auth"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "ef6f3129-d74a-a314-4acb-fea4a25a8f96",
      "name": "Department Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "35417a48-6f68-bc4d-6b46-112b06d4ff13",
          "name": "/department",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a831ca8-4ac1-463e-8c20-16a85108321d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"department_id\", jsonData.department.id);",
                  "",
                  "tests['is_active is true'] = jsonData.department.is_active;",
                  "",
                  "tests['department_name is test_d'] = jsonData.department.department_name === \"test_d\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.department.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Department created successfully.\";",
                  "",
                  "tests['employees is empty list'] = jsonData.department.employees.length === 0;",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"department_name\": \"test_d\",\n  \"organization_id\": {{organization_id}},\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/department"
          },
          "response": []
        },
        {
          "_postman_id": "b870d091-0544-17fc-10cd-fa0a5337b543",
          "name": "/department/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efd545ad-6e37-4859-9422-c7beca9ff373",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"department_name is test_d\"] = jsonData.department_name === \"test_d\";",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/department/{{department_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "ddfff71e-e1e8-40a0-9f17-888858bb1525",
          "name": "/departments",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c73c3e5b-9457-4b71-bc05-a39119ca590d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Departments list contains one item\", function() {",
                  "    pm.expect(jsonData.list.length).to.eql(1);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/departments"
          },
          "response": []
        },
        {
          "_postman_id": "a9333133-a7b6-7001-a638-440b812c9325",
          "name": "/department/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "081cb1ae-2cbc-4d91-a074-eeeaa36ab482",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['is_active is true'] = jsonData.department.is_active;",
                  "",
                  "tests['department_name is new_test_d'] = jsonData.department.department_name === \"new_test_d\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.department.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Department updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"department_name\": \"new_test_d\", \n  \"organization_id\": {{organization_id}}\n}"
            },
            "url": "{{url}}/department/{{department_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "059115d9-8572-8880-6baf-cd9ecbc0f29b",
          "name": "/department/<int:id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b15fea53-10bf-4f77-a625-d04adee8db56",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/department/{{departmentId}}"
          },
          "response": []
        },
        {
          "_postman_id": "028e7122-2482-6d95-c29d-a6d5bc42283a",
          "name": "/activate_department/<int:department_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9ffed552-c3ca-4eef-bf03-d4acb934aee8",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Department is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_department/{{department_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "141d3246-79d0-56bc-4d41-3e4d3feb2b6f",
      "name": "MaritalStatus Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "70ae2031-72c9-9e6f-a695-d6fdbbb5ac90",
          "name": "/marital_statuses",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a2535077-dc17-4391-b254-f2f4ab543067",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"marital_statuses contains 5 items\"] = jsonData.marital_statuses.length === 5;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 300 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/marital_statuses"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "d16bf889-c628-6099-e4f6-f3ab39c14b88",
      "name": "EmploymentPosition Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "3bdca440-abd2-643b-cd5d-88e37c53362c",
          "name": "/employment_position",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "460717ac-8ad1-4730-81a7-f8ea64b94aa2",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"position_id\", jsonData.employment_position.id);",
                  "",
                  "tests['is_active is true'] = jsonData.employment_position.is_active;",
                  "",
                  "tests['position_name_feminine is test_e_p_f'] = jsonData.employment_position.position_name_feminine === \"test_e_p_f\";",
                  "",
                  "tests['position_name_masculine is test_e_p_f'] = jsonData.employment_position.position_name_masculine === \"test_e_p_m\";",
                  "",
                  "tests['minimum_hourly_wage is 1.00'] = jsonData.employment_position.minimum_hourly_wage === \"1.0000\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.employment_position.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['employees is empty list'] = jsonData.employment_position.employees.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employment position created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position_name_feminine\": \"test_e_p_f\",\n  \"position_name_masculine\": \"test_e_p_m\",\n  \"minimum_hourly_wage\": 1.00,\n  \"organization_id\": {{organization_id}},\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/employment_position",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "56a3fc61-78f4-1255-a22b-9269139561a9",
          "name": "/employment_position/<int:position_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "358b217b-643b-46a9-8ae1-686bbd933ba0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"position_name_feminine is test_e_p_f\"] = jsonData.position_name_feminine === \"test_e_p_f\";",
                  "",
                  "tests[\"position_name_masculine is test_e_p_m\"] = jsonData.position_name_masculine === \"test_e_p_m\";",
                  "",
                  "tests[\"minimum_hourly_wage is 1.00\"] = jsonData.minimum_hourly_wage === \"1.0000\";",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/employment_position/{{position_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "3024d200-ff9a-dc75-e7c0-c8b0949f9004",
          "name": "/employment_position/<int:position_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b42bf2f-a309-4700-b19e-1347c70a3138",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['is_active is true'] = jsonData.employment_position.is_active;",
                  "",
                  "tests['position_name_feminine is new_test_e_p_f'] = jsonData.employment_position.position_name_feminine === \"new_test_e_p_f\";",
                  "",
                  "tests['position_name_masculine is new_test_e_p_m'] = jsonData.employment_position.position_name_masculine === \"new_test_e_p_m\";",
                  "",
                  "tests['minimum_hourly_wage is 2.00'] = jsonData.employment_position.minimum_hourly_wage === \"2.0000\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.employment_position.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employment position updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"position_name_feminine\": \"new_test_e_p_f\",\n  \"position_name_masculine\": \"new_test_e_p_m\",\n  \"minimum_hourly_wage\": 2.00,\n  \"organization_id\": {{organization_id}},\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/employment_position/{{position_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "0ce00139-3713-5441-2532-9ffce8b8efe5",
          "name": "/employment_position/<int:position_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e457a305-f704-44c1-a87b-c0da919c9f4c",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employment position is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/employment_position/{{position_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "0e435f79-f0d6-e414-e353-a417eafe82c1",
          "name": "/activate_employment_position/<int:position_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4ffaf008-d608-42cb-98f8-9ed1273d9b05",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employment position is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_employment_position/{{position_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "806cb1fc-315d-e4f2-2530-5a0b15b81ff4",
      "name": "Shift Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "9e85c207-68ca-ab9d-1fe4-024dec6b6c73",
          "name": "/shift (rotating)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa40d4e2-2c73-49d4-ae16-cbfa1c9b7ba4",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"shift_r_id\", jsonData.shift.id);",
                  "",
                  "tests[\"shift_name is test_s_r\"] = jsonData.shift.shift_name === \"test_s_r\";",
                  "",
                  "tests[\"weekly_hours is 48\"] = jsonData.shift.weekly_hours === \"48.0\";",
                  "",
                  "tests[\"is_rotating is true\"] = jsonData.shift.is_rotating;",
                  "",
                  "tests[\"payment_period is Quincenal\"] = jsonData.shift.payment_period === \"Quincenal\";",
                  "",
                  "tests[\"break_length is 00:30:00\"] = jsonData.shift.break_length === \"00:30:00\";",
                  "",
                  "tests[\"is_break_included_in_shift is false\"] = !jsonData.shift.is_break_included_in_shift;",
                  "",
                  "tests[\"rotation_start_hour is 06:00:00\"] = jsonData.shift.rotation_start_hour === \"06:00:00\";",
                  "",
                  "tests[\"rotation_end_hour is 21:00:00\"] = jsonData.shift.rotation_end_hour === \"21:00:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.shift.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.shift.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['employees is empty list'] = jsonData.shift.employees.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shift_name\": \"test_s_r\",\n  \"weekly_hours\": 48,\n  \"is_rotating\": true,\n  \"payment_period\": \"Quincenal\",\n  \"break_length\": \"00:30:00\",\n  \"is_break_included_in_shift\": false,\n  \"is_active\": true,\n  \"organization_id\": {{organization_id}},\n  \"rotation_start_hour\": \"06:00:00\",\n  \"rotation_end_hour\": \"21:00:00\"\n}"
            },
            "url": "{{url}}/shift"
          },
          "response": []
        },
        {
          "_postman_id": "43a45165-c5f8-109b-073c-9db860c76ead",
          "name": "/shift (fixed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39088049-6704-4e49-8448-97d917d0bca9",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"shift_f_id\", jsonData.shift.id);",
                  "",
                  "tests[\"shift_name is test_s_f\"] = jsonData.shift.shift_name === \"test_s_f\";",
                  "",
                  "tests[\"weekly_hours is 44\"] = jsonData.shift.weekly_hours === \"44.0\";",
                  "",
                  "tests[\"is_rotating is false\"] = !jsonData.shift.is_rotating;",
                  "",
                  "tests[\"payment_period is Quincenal\"] = jsonData.shift.payment_period === \"Quincenal\";",
                  "",
                  "tests[\"break_length is 00:30:00\"] = jsonData.shift.break_length === \"00:30:00\";",
                  "",
                  "tests[\"is_break_included_in_shift is false\"] = !jsonData.shift.is_break_included_in_shift;",
                  "",
                  "tests[\"rest_day is Domingo\"] = jsonData.shift.rest_day === \"Domingo\";",
                  "",
                  "tests[\"fixed_start_hour is 08:00:00\"] = jsonData.shift.fixed_start_hour_monday === \"08:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_tuesday === \"08:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_wednesday === \"08:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_thursday === \"08:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_friday === \"08:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_saturday === \"08:00:00\";",
                  "",
                  "tests[\"fixed_start_break_hour is 12:00:00\"] = jsonData.shift.fixed_start_break_hour_monday === \"12:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_tuesday === \"12:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_wednesday === \"12:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_thursday === \"12:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_friday === \"12:00:00\";",
                  "",
                  "tests[\"fixed_end_break_hour is 12:30:00\"] = jsonData.shift.fixed_end_break_hour_monday === \"12:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_tuesday === \"12:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_wednesday === \"12:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_thursday === \"12:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_friday === \"12:30:00\";",
                  "",
                  "tests[\"fixed_end_hour is 16:30:00\"] = jsonData.shift.fixed_end_hour_monday === \"16:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_tuesday === \"16:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_wednesday === \"16:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_thursday === \"16:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_friday === \"16:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_saturday === \"12:00:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.shift.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.shift.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['employees is empty list'] = jsonData.shift.employees.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shift_name\": \"test_s_f\",\n  \"weekly_hours\": 44,\n  \"is_rotating\": false,\n  \"payment_period\": \"Quincenal\",\n  \"break_length\": \"00:30:00\",\n  \"is_break_included_in_shift\": false,\n  \"is_active\": true,\n  \"organization_id\": {{organization_id}},\n  \"fixed_start_hour_monday\": \"08:00:00\",\n  \"fixed_start_break_hour_monday\": \"12:00:00\",\n  \"fixed_end_break_hour_monday\": \"12:30:00\",\n  \"fixed_end_hour_monday\": \"16:30:00\",\n  \"fixed_start_hour_tuesday\": \"08:00:00\",\n  \"fixed_start_break_hour_tuesday\": \"12:00:00\",\n  \"fixed_end_break_hour_tuesday\": \"12:30:00\",\n  \"fixed_end_hour_tuesday\": \"16:30:00\",\n  \"fixed_start_hour_wednesday\": \"08:00:00\",\n  \"fixed_start_break_hour_wednesday\": \"12:00:00\",\n  \"fixed_end_break_hour_wednesday\": \"12:30:00\",\n  \"fixed_end_hour_wednesday\": \"16:30:00\",\n  \"fixed_start_hour_thursday\": \"08:00:00\",\n  \"fixed_start_break_hour_thursday\": \"12:00:00\",\n  \"fixed_end_break_hour_thursday\": \"12:30:00\",\n  \"fixed_end_hour_thursday\": \"16:30:00\",\n  \"fixed_start_hour_friday\": \"08:00:00\",\n  \"fixed_start_break_hour_friday\": \"12:00:00\",\n  \"fixed_end_break_hour_friday\": \"12:30:00\",\n  \"fixed_end_hour_friday\": \"16:30:00\",\n  \"fixed_start_hour_saturday\": \"08:00:00\",\n  \"fixed_end_hour_saturday\": \"12:00:00\",\n  \"rest_day\": \"Domingo\"\n}"
            },
            "url": "{{url}}/shift"
          },
          "response": []
        },
        {
          "_postman_id": "3738738b-92b9-df35-aa75-e7653c720e39",
          "name": "/shift/<int:shift_id> (rotating)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "87950f86-c408-4752-a321-a05f12398fc7",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"shift_name is test_s_r\"] = jsonData.shift_name === \"test_s_r\";",
                  "",
                  "tests[\"weekly_hours is 48\"] = jsonData.weekly_hours === \"48.0\";",
                  "",
                  "tests[\"is_rotating is true\"] = jsonData.is_rotating;",
                  "",
                  "tests[\"payment_period is Quincenal\"] = jsonData.payment_period === \"Quincenal\";",
                  "",
                  "tests[\"break_length is 00:30:00\"] = jsonData.break_length === \"00:30:00\";",
                  "",
                  "tests[\"is_break_included_in_shift is false\"] = !jsonData.is_break_included_in_shift;",
                  "",
                  "tests[\"rotation_start_hour is 06:00:00\"] = jsonData.rotation_start_hour === \"06:00:00\";",
                  "",
                  "tests[\"rotation_end_hour is 21:00:00\"] = jsonData.rotation_end_hour === \"21:00:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/shift/{{shift_r_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "ef759934-8df6-d7a4-7bc8-7b27fe6cb31c",
          "name": "/shift/<int:shift_id> (fixed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0aa74cd6-bf38-4e9a-90d9-771a8b354c60",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"shift_name is test_s_f\"] = jsonData.shift_name === \"test_s_f\";",
                  "",
                  "tests[\"weekly_hours is 44\"] = jsonData.weekly_hours === \"44.0\";",
                  "",
                  "tests[\"is_rotating is false\"] = !jsonData.is_rotating;",
                  "",
                  "tests[\"payment_period is Quincenal\"] = jsonData.payment_period === \"Quincenal\";",
                  "",
                  "tests[\"break_length is 00:30:00\"] = jsonData.break_length === \"00:30:00\";",
                  "",
                  "tests[\"rest_day is Domingo\"] = jsonData.rest_day === \"Domingo\";",
                  "",
                  "tests[\"is_break_included_in_shift is false\"] = !jsonData.is_break_included_in_shift;",
                  "",
                  "tests[\"fixed_start_hour is 08:00:00\"] = jsonData.fixed_start_hour_monday === \"08:00:00\" &&",
                  "                                        jsonData.fixed_start_hour_tuesday === \"08:00:00\" &&",
                  "                                        jsonData.fixed_start_hour_wednesday === \"08:00:00\" &&",
                  "                                        jsonData.fixed_start_hour_thursday === \"08:00:00\" &&",
                  "                                        jsonData.fixed_start_hour_friday === \"08:00:00\" &&",
                  "                                        jsonData.fixed_start_hour_saturday === \"08:00:00\";",
                  "",
                  "tests[\"fixed_start_break_hour is 12:00:00\"] = jsonData.fixed_start_break_hour_monday === \"12:00:00\" &&",
                  "                                              jsonData.fixed_start_break_hour_tuesday === \"12:00:00\" &&",
                  "                                              jsonData.fixed_start_break_hour_wednesday === \"12:00:00\" &&",
                  "                                              jsonData.fixed_start_break_hour_thursday === \"12:00:00\" &&",
                  "                                              jsonData.fixed_start_break_hour_friday === \"12:00:00\";",
                  "",
                  "tests[\"fixed_end_break_hour is 12:30:00\"] = jsonData.fixed_end_break_hour_monday === \"12:30:00\" &&",
                  "                                            jsonData.fixed_end_break_hour_tuesday === \"12:30:00\" &&",
                  "                                            jsonData.fixed_end_break_hour_wednesday === \"12:30:00\" &&",
                  "                                            jsonData.fixed_end_break_hour_thursday === \"12:30:00\" &&",
                  "                                            jsonData.fixed_end_break_hour_friday === \"12:30:00\";",
                  "",
                  "tests[\"fixed_end_hour is 16:30:00\"] = jsonData.fixed_end_hour_monday === \"16:30:00\" &&",
                  "                                      jsonData.fixed_end_hour_tuesday === \"16:30:00\" &&",
                  "                                      jsonData.fixed_end_hour_wednesday === \"16:30:00\" &&",
                  "                                      jsonData.fixed_end_hour_thursday === \"16:30:00\" &&",
                  "                                      jsonData.fixed_end_hour_friday === \"16:30:00\" &&",
                  "                                      jsonData.fixed_end_hour_saturday === \"12:00:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/shift/{{shift_f_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "61c6d54d-b920-5b5c-f1b6-e3b294728c10",
          "name": "/shift/<int:shift_id> (rotating)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f8ffb93-fa9f-4479-a5c1-30e9b6147ffd",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"shift_name is new_test_s_r\"] = jsonData.shift.shift_name === \"new_test_s_r\";",
                  "",
                  "tests[\"weekly_hours is 44\"] = jsonData.shift.weekly_hours === \"44.0\";",
                  "",
                  "tests[\"is_rotating is true\"] = jsonData.shift.is_rotating;",
                  "",
                  "tests[\"payment_period is Semanal\"] = jsonData.shift.payment_period === \"Semanal\";",
                  "",
                  "tests[\"break_length is 01:00:00\"] = jsonData.shift.break_length === \"01:00:00\";",
                  "",
                  "tests[\"is_break_included_in_shift is true\"] = jsonData.shift.is_break_included_in_shift;",
                  "",
                  "tests[\"rotation_start_hour is 00:00:00\"] = jsonData.shift.rotation_start_hour === \"00:00:00\";",
                  "",
                  "tests[\"rotation_end_hour is 15:00:00\"] = jsonData.shift.rotation_end_hour === \"15:00:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.shift.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.shift.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shift_name\": \"new_test_s_r\",\n  \"weekly_hours\": 44,\n  \"is_rotating\": true,\n  \"payment_period\": \"Semanal\",\n  \"break_length\": \"01:00:00\",\n  \"is_break_included_in_shift\": true,\n  \"is_active\": true,\n  \"organization_id\": {{organization_id}},\n  \"rotation_start_hour\": \"00:00:00\",\n  \"rotation_end_hour\": \"15:00:00\"\n}"
            },
            "url": "{{url}}/shift/{{shift_r_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "560de2bb-c01a-f01e-b7ae-705ea688b64d",
          "name": "/shift/<int:shift_id> (fixed)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c9e0e68-66a5-4f49-a3e9-97aaab93b4ba",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"shift_name is test_s_f\"] = jsonData.shift.shift_name === \"test_s_f\";",
                  "",
                  "tests[\"weekly_hours is 48\"] = jsonData.shift.weekly_hours === \"48.0\";",
                  "",
                  "tests[\"is_rotating is false\"] = !jsonData.shift.is_rotating;",
                  "",
                  "tests[\"payment_period is Diario\"] = jsonData.shift.payment_period === \"Diario\";",
                  "",
                  "tests[\"break_length is 00:30:00\"] = jsonData.shift.break_length === \"00:30:00\";",
                  "",
                  "tests[\"rest_day is S\u00e1bado\"] = jsonData.shift.rest_day === \"S\u00e1bado\";",
                  "",
                  "tests[\"is_break_included_in_shift is false\"] = !jsonData.shift.is_break_included_in_shift;",
                  "",
                  "tests[\"fixed_start_hour is 09:00:00\"] = jsonData.shift.fixed_start_hour_monday === \"09:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_tuesday === \"09:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_wednesday === \"09:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_thursday === \"09:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_friday === \"09:00:00\" &&",
                  "                                        jsonData.shift.fixed_start_hour_sunday === \"09:00:00\";",
                  "",
                  "tests[\"fixed_start_break_hour is 12:00:00\"] = jsonData.shift.fixed_start_break_hour_monday === \"13:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_tuesday === \"13:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_wednesday === \"13:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_thursday === \"13:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_friday === \"13:00:00\" &&",
                  "                                              jsonData.shift.fixed_start_break_hour_sunday === \"13:00:00\";",
                  "",
                  "tests[\"fixed_end_break_hour is 12:30:00\"] = jsonData.shift.fixed_end_break_hour_monday === \"13:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_tuesday === \"13:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_wednesday === \"13:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_thursday === \"13:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_friday === \"13:30:00\" &&",
                  "                                            jsonData.shift.fixed_end_break_hour_sunday === \"13:30:00\";",
                  "",
                  "tests[\"fixed_end_hour is 16:30:00\"] = jsonData.shift.fixed_end_hour_monday === \"17:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_tuesday === \"17:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_wednesday === \"17:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_thursday === \"17:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_friday === \"17:30:00\" &&",
                  "                                      jsonData.shift.fixed_end_hour_sunday === \"17:30:00\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.shift.is_active;",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.shift.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"shift_name\": \"test_s_f\",\n  \"weekly_hours\": 48,\n  \"is_rotating\": false,\n  \"payment_period\": \"Diario\",\n  \"break_length\": \"00:30:00\",\n  \"is_break_included_in_shift\": false,\n  \"is_active\": true,\n  \"organization_id\": {{organization_id}},\n  \"fixed_start_hour_sunday\": \"09:00:00\",\n  \"fixed_start_break_hour_sunday\": \"13:00:00\",\n  \"fixed_end_break_hour_sunday\": \"13:30:00\",\n  \"fixed_end_hour_sunday\": \"17:30:00\",\n  \"fixed_start_hour_monday\": \"09:00:00\",\n  \"fixed_start_break_hour_monday\": \"13:00:00\",\n  \"fixed_end_break_hour_monday\": \"13:30:00\",\n  \"fixed_end_hour_monday\": \"17:30:00\",\n  \"fixed_start_hour_tuesday\": \"09:00:00\",\n  \"fixed_start_break_hour_tuesday\": \"13:00:00\",\n  \"fixed_end_break_hour_tuesday\": \"13:30:00\",\n  \"fixed_end_hour_tuesday\": \"17:30:00\",\n  \"fixed_start_hour_wednesday\": \"09:00:00\",\n  \"fixed_start_break_hour_wednesday\": \"13:00:00\",\n  \"fixed_end_break_hour_wednesday\": \"13:30:00\",\n  \"fixed_end_hour_wednesday\": \"17:30:00\",\n  \"fixed_start_hour_thursday\": \"09:00:00\",\n  \"fixed_start_break_hour_thursday\": \"13:00:00\",\n  \"fixed_end_break_hour_thursday\": \"13:30:00\",\n  \"fixed_end_hour_thursday\": \"17:30:00\",\n  \"fixed_start_hour_friday\": \"09:00:00\",\n  \"fixed_start_break_hour_friday\": \"13:00:00\",\n  \"fixed_end_break_hour_friday\": \"13:30:00\",\n  \"fixed_end_hour_friday\": \"17:30:00\",\n  \"fixed_start_hour_saturday\": null,\n  \"fixed_end_hour_saturday\": null,\n  \"rest_day\": \"S\u00e1bado\"\n}"
            },
            "url": "{{url}}/shift/{{shift_f_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "958a005e-cc0a-9a7b-8f6d-55450cb52369",
          "name": "/shift/<int:shift_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "435eed19-eba1-4908-a7b6-ac2ac76d2ee7",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/shift/{{shift_r_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "9c567ad4-5440-e6d8-54c8-8b183d1b10ae",
          "name": "/activate_shift/<int_shift_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76acf46d-77d3-4c0a-b6b8-8fd0878a8ad8",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Shift is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_shift/{{shift_r_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "9b7bd20c-be44-712c-ddb2-d2615b929353",
      "name": "Employee Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "030a9b38-dd86-4bcd-74f4-ff5b8b718574",
          "name": "/employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "afead3e5-3b8f-44fb-9426-f3fa25c62c9f",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"employee_id\", jsonData.employee.id);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.employee.first_name === \"f_n\";",
                  "",
                  "tests[\"second_name is s_n\"] = jsonData.employee.second_name === \"s_n\";",
                  "",
                  "tests[\"first_surname is f_sn\"] = jsonData.employee.first_surname === \"f_sn\";",
                  "",
                  "tests[\"second_surname is s_sn\"] = jsonData.employee.second_surname === \"s_sn\";",
                  "",
                  "tests[\"gender is Hombre\"] = jsonData.employee.gender === \"Hombre\";",
                  "",
                  "tests[\"is_panamanian is true\"] = jsonData.employee.is_panamanian;",
                  "",
                  "tests[\"national_id_number is 1-11-111\"] = jsonData.employee.national_id_number === \"1-11-111\";",
                  "",
                  "tests[\"date_of_birth is 2000-01-31\"] = jsonData.employee.date_of_birth === \"2000-01-31\";",
                  "",
                  "tests[\"address is Panam\u00e1\"] = jsonData.employee.address === \"Panam\u00e1\";",
                  "",
                  "tests[\"home_phone is 222-2222\"] = jsonData.employee.home_phone === \"222-2222\";",
                  "",
                  "tests[\"mobile_phone is 6666-6666\"] = jsonData.employee.mobile_phone === \"6666-6666\";",
                  "",
                  "tests[\"email is f_n@f_sn.com\"] = jsonData.employee.email === \"f_n@f_sn.com\";",
                  "",
                  "tests[\"type_of_contract is Definido\"] = jsonData.employee.type_of_contract === \"Definido\";",
                  "",
                  "tests[\"payment_method is ACH\"] = jsonData.employee.payment_method === \"ACH\";",
                  "",
                  "tests[\"salary_per_payment_period is 104.00\"] = jsonData.employee.salary_per_payment_period === \"104.00\";",
                  "",
                  "tests[\"representation_expenses_per_payment_period is 0.00\"] = jsonData.employee.representation_expenses_per_payment_period === \"0.00\";",
                  "",
                  "tests[\"employment_date is 2018-01-01\"] = jsonData.employee.employment_date === \"2018-01-01\";",
                  "",
                  "tests[\"contract_expiration_date is 2018-01-31\"] = jsonData.employee.contract_expiration_date === \"2018-01-31\";",
                  "",
                  "tests[\"termination_date is 2018-01-15\"] = jsonData.employee.termination_date === \"2018-01-15\";",
                  "",
                  "tests[\"termination_reason is Per\u00edodo de Prueba\"] = jsonData.employee.termination_reason === \"Per\u00edodo de Prueba\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.employee.is_active;",
                  "",
                  "tests[\"position_id is correct\"] = jsonData.employee.position_id === parseInt(environment.position_id);",
                  "",
                  "tests[\"department_id is correct\"] = jsonData.employee.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"marital_status_id is correct\"] = jsonData.employee.marital_status_id === 1;",
                  "",
                  "tests[\"shift_id is correct\"] = jsonData.employee.shift_id === parseInt(environment.shift_r_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employee created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"f_n\",\n  \"second_name\": \"s_n\",\n  \"first_surname\": \"f_sn\",\n  \"second_surname\": \"s_sn\",\n  \"national_id_number\": \"1-11-111\",\n  \"is_panamanian\": true,\n  \"date_of_birth\": \"01-31-2000\",\n  \"gender\": \"Hombre\",\n  \"address\": \"Panam\u00e1\",\n  \"home_phone\": \"222-2222\",\n  \"mobile_phone\": \"6666-6666\",\n  \"email\": \"f_n@f_sn.com\",\n  \"type_of_contract\": \"Definido\",\n  \"employment_date\": \"01-01-2018\",\n  \"contract_expiration_date\": \"01-31-2018\",\n  \"termination_date\": \"01-15-2018\",\n  \"termination_reason\": \"Per\u00edodo de Prueba\",\n  \"salary_per_payment_period\": \"104.00\",\n  \"representation_expenses_per_payment_period\": \"0\",\n  \"payment_method\": \"ACH\",\n  \"is_active\": true,\n  \"marital_status_id\": 1,\n  \"department_id\": {{department_id}},\n  \"position_id\": {{position_id}},\n  \"shift_id\": {{shift_r_id}}\n}"
            },
            "url": "{{url}}/employee"
          },
          "response": []
        },
        {
          "_postman_id": "986959dc-c4b0-85c8-28f0-2fda869f2d43",
          "name": "/employee/<int:employee_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3f8040f0-9560-40e3-83d4-919a4039728d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.first_name === \"f_n\";",
                  "",
                  "tests[\"second_name is s_n\"] = jsonData.second_name === \"s_n\";",
                  "",
                  "tests[\"first_surname is f_sn\"] = jsonData.first_surname === \"f_sn\";",
                  "",
                  "tests[\"second_surname is s_sn\"] = jsonData.second_surname === \"s_sn\";",
                  "",
                  "tests[\"national_id_number is 1-11-111\"] = jsonData.national_id_number === \"1-11-111\";",
                  "",
                  "tests[\"is_panamanian is true\"] = jsonData.is_panamanian;",
                  "",
                  "tests[\"date_of_birth is 2000-01-31\"] = jsonData.date_of_birth === \"2000-01-31\";",
                  "",
                  "tests[\"gender is Hombre\"] = jsonData.gender === \"Hombre\";",
                  "",
                  "tests[\"address is Panam\u00e1\"] = jsonData.address === \"Panam\u00e1\";",
                  "",
                  "tests[\"home_phone is 222-2222\"] = jsonData.home_phone === \"222-2222\";",
                  "",
                  "tests[\"mobile_phone is 6666-6666\"] = jsonData.mobile_phone === \"6666-6666\";",
                  "",
                  "tests[\"email is f_n@f_sn.com\"] = jsonData.email === \"f_n@f_sn.com\";",
                  "",
                  "tests[\"type_of_contract is Definido\"] = jsonData.type_of_contract === \"Definido\";",
                  "",
                  "tests[\"employment_date is 2018-01-0\"] = jsonData.employment_date === \"2018-01-01\";",
                  "",
                  "tests[\"contract_expiration_date is 2018-01-31\"] = jsonData.contract_expiration_date === \"2018-01-31\";",
                  "",
                  "tests[\"termination_date is 2018-01-15\"] = jsonData.termination_date === \"2018-01-15\";",
                  "",
                  "tests[\"termination_reason is Per\u00edodo de Prueba\"] = jsonData.termination_reason === \"Per\u00edodo de Prueba\";",
                  "",
                  "tests[\"salary_per_payment_period is 104.00\"] = jsonData.salary_per_payment_period === \"104.00\";",
                  "",
                  "tests[\"representation_expenses_per_payment_period is 0.00\"] = jsonData.representation_expenses_per_payment_period === \"0.00\";",
                  "",
                  "tests[\"payment_method is ACH\"] = jsonData.payment_method === \"ACH\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"marital_status_id is correct\"] = jsonData.marital_status_id === 1;",
                  "",
                  "tests[\"department_id is correct\"] = jsonData.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"position_id is correct\"] = jsonData.position_id === parseInt(environment.position_id);",
                  "",
                  "tests[\"shift_id is correct \"] = jsonData.shift_id === parseInt(environment.shift_r_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/employee/{{employee_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "7e4a7d43-5042-d645-9099-00311afba277",
          "name": "/employee/<id:employee_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0dc7f14a-9dae-4fb9-866a-f2217bdf06cb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is new_f_n\"] = jsonData.employee.first_name === \"new_f_n\";",
                  "",
                  "tests[\"second_name is new_s_n\"] = jsonData.employee.second_name === \"new_s_n\";",
                  "",
                  "tests[\"first_surname is new_f_sn\"] = jsonData.employee.first_surname === \"new_f_sn\";",
                  "",
                  "tests[\"second_surname is new_s_sn\"] = jsonData.employee.second_surname === \"new_s_sn\";",
                  "",
                  "tests[\"gender is Mujer\"] = jsonData.employee.gender === \"Mujer\";",
                  "",
                  "tests[\"is_panamanian is false\"] = !jsonData.employee.is_panamanian;",
                  "",
                  "tests[\"national_id_number is N-1-11-111\"] = jsonData.employee.national_id_number === \"N-1-11-111\";",
                  "",
                  "tests[\"date_of_birth is 2001-01-31\"] = jsonData.employee.date_of_birth === \"2001-01-31\";",
                  "",
                  "tests[\"address is Chiriqu\u00ed\"] = jsonData.employee.address === \"Chiriqu\u00ed\";",
                  "",
                  "tests[\"home_phone is 333-3333\"] = jsonData.employee.home_phone === \"333-3333\";",
                  "",
                  "tests[\"mobile_phone is 6666-7777\"] = jsonData.employee.mobile_phone === \"6666-7777\";",
                  "",
                  "tests[\"email is new_f_n@new_f_sn.com\"] = jsonData.employee.email === \"new_f_n@new_f_sn.com\";",
                  "",
                  "tests[\"type_of_contract is Indefinido\"] = jsonData.employee.type_of_contract === \"Indefinido\";",
                  "",
                  "tests[\"payment_method is Cheque\"] = jsonData.employee.payment_method === \"Cheque\";",
                  "",
                  "tests[\"salary_per_payment_period is 208.00\"] = jsonData.employee.salary_per_payment_period === \"208.00\";",
                  "",
                  "tests[\"representation_expenses_per_payment_period is 100.00\"] = jsonData.employee.representation_expenses_per_payment_period === \"100.00\";",
                  "",
                  "tests[\"employment_date is 2019-01-01\"] = jsonData.employee.employment_date === \"2019-01-01\";",
                  "",
                  "tests[\"contract_expiration_date is 2019-01-31\"] = jsonData.employee.contract_expiration_date === \"2019-01-31\";",
                  "",
                  "tests[\"termination_date is 2019-01-15\"] = jsonData.employee.termination_date === \"2019-01-15\";",
                  "",
                  "tests[\"termination_reason is Renuncia\"] = jsonData.employee.termination_reason === \"Renuncia\";",
                  "",
                  "tests[\"is_active is true\"] = jsonData.employee.is_active;",
                  "",
                  "tests[\"position_id is correct\"] = jsonData.employee.position_id === parseInt(environment.position_id);",
                  "",
                  "tests[\"department_id is correct\"] = jsonData.employee.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"marital_status_id is correct\"] = jsonData.employee.marital_status_id === 2;",
                  "",
                  "tests[\"shift_id is correct\"] = jsonData.employee.shift_id === parseInt(environment.shift_f_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employee updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"new_f_n\",\n  \"second_name\": \"new_s_n\",\n  \"first_surname\": \"new_f_sn\",\n  \"second_surname\": \"new_s_sn\",\n  \"national_id_number\": \"N-1-11-111\",\n  \"is_panamanian\": false,\n  \"date_of_birth\": \"01-31-2001\",\n  \"gender\": \"Mujer\",\n  \"address\": \"Chiriqu\u00ed\",\n  \"home_phone\": \"333-3333\",\n  \"mobile_phone\": \"6666-7777\",\n  \"email\": \"new_f_n@new_f_sn.com\",\n  \"type_of_contract\": \"Indefinido\",\n  \"employment_date\": \"01-01-2019\",\n  \"contract_expiration_date\": \"01-31-2019\",\n  \"termination_date\": \"01-15-2019\",\n  \"termination_reason\": \"Renuncia\",\n  \"salary_per_payment_period\": \"208.00\",\n  \"representation_expenses_per_payment_period\": \"100\",\n  \"payment_method\": \"Cheque\",\n  \"is_active\": true,\n  \"marital_status_id\": 2,\n  \"department_id\": {{department_id}},\n  \"position_id\": {{position_id}},\n  \"shift_id\": {{shift_f_id}}\n}"
            },
            "url": "{{url}}/employee/{{employee_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "ff0d9c53-4f2b-4204-2315-c3ab8d31fe39",
          "name": "/employee/<int:employee_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35d08683-adb3-4f78-ac8e-437c1cd32457",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employee is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/employee/{{employee_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "edbf4adf-cf4c-e3ff-2ae3-63f81219ea89",
          "name": "/activate_employee/<id:employee_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d776a32d-8020-4b59-876d-5ed2035f4e91",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Employee is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_employee/{{employee_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "78547320-02e8-4b3f-4fce-038c136c63ce",
      "name": "EmergencyContact Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "32100136-4d0d-4871-1ee6-acc12402182f",
          "name": "/emergency_contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fdf17825-2c89-4607-8b2a-71122cefffeb",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"contact_id\", jsonData.emergency_contact.id);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.emergency_contact.first_name === \"f_n\";",
                  "",
                  "tests[\"last_name is s_n\"] = jsonData.emergency_contact.last_name === \"l_n\";",
                  "",
                  "tests[\"home_phone is 111-1111\"] = jsonData.emergency_contact.home_phone === \"111-1111\";",
                  "",
                  "tests[\"work_phone is 222-2222\"] = jsonData.emergency_contact.work_phone === \"222-2222\";",
                  "",
                  "tests[\"mobile_phone is 6666-6666\"] = jsonData.emergency_contact.mobile_phone === \"6666-6666\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.emergency_contact.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Emergency contact created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"f_n\",\r\n    \"last_name\": \"l_n\",\r\n    \"home_phone\": \"111-1111\",\r\n    \"work_phone\": \"222-2222\",\r\n    \"mobile_phone\": \"6666-6666\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/emergency_contact"
          },
          "response": []
        },
        {
          "_postman_id": "ec975174-77fc-8bbd-a6cf-2b67396a3547",
          "name": "/emergency_contact/<int:contact_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d9c5dc3-01d7-4cea-84e7-ce6c8aa53be8",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.first_name === \"f_n\";",
                  "",
                  "tests[\"last_name is s_n\"] = jsonData.last_name === \"l_n\";",
                  "",
                  "tests[\"home_phone is 111-1111\"] = jsonData.home_phone === \"111-1111\";",
                  "",
                  "tests[\"work_phone is 222-2222\"] = jsonData.work_phone === \"222-2222\";",
                  "",
                  "tests[\"mobile_phone is 6666-6666\"] = jsonData.mobile_phone === \"6666-6666\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/emergency_contact/{{contact_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "c4ed860c-d647-cffe-ab33-deeca57db56e",
          "name": "/emergency_contact/<id:contact_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11c9a3f7-597b-409e-a2fb-3eb7f142c257",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is new_f_n\"] = jsonData.emergency_contact.first_name === \"new_f_n\";",
                  "",
                  "tests[\"last_name is new_l_n\"] = jsonData.emergency_contact.last_name === \"new_l_n\";",
                  "",
                  "tests[\"home_phone is 333-3333\"] = jsonData.emergency_contact.home_phone === \"333-3333\";",
                  "",
                  "tests[\"work_phone is 444-4444\"] = jsonData.emergency_contact.work_phone === \"444-4444\";",
                  "",
                  "tests[\"mobile_phone is 6666-7777\"] = jsonData.emergency_contact.mobile_phone === \"6666-7777\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.emergency_contact.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Emergency contact updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"new_f_n\",\r\n    \"last_name\": \"new_l_n\",\r\n    \"home_phone\": \"333-3333\",\r\n    \"work_phone\": \"444-4444\",\r\n    \"mobile_phone\": \"6666-7777\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/emergency_contact/{{contact_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "5f9e319e-8b57-eaf8-4c79-d9edd8fe0325",
          "name": "/emergency_contact/<int:contact_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71d09c42-9212-4c32-a971-260332c8aa26",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Emergency contact deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/emergency_contact/{{contact_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "47bb45bc-663e-d7d4-4867-1c11353f97b3",
          "name": "/emergency_contact",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "049a76a7-4a44-44ff-8b40-c4eba86a51bd",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"contact_id\", jsonData.emergency_contact.id);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.emergency_contact.first_name === \"f_n\";",
                  "",
                  "tests[\"last_name is s_n\"] = jsonData.emergency_contact.last_name === \"l_n\";",
                  "",
                  "tests[\"home_phone is 111-1111\"] = jsonData.emergency_contact.home_phone === \"111-1111\";",
                  "",
                  "tests[\"work_phone is 222-2222\"] = jsonData.emergency_contact.work_phone === \"222-2222\";",
                  "",
                  "tests[\"mobile_phone is 6666-6666\"] = jsonData.emergency_contact.mobile_phone === \"6666-6666\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.emergency_contact.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Emergency contact created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"f_n\",\r\n    \"last_name\": \"l_n\",\r\n    \"home_phone\": \"111-1111\",\r\n    \"work_phone\": \"222-2222\",\r\n    \"mobile_phone\": \"6666-6666\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/emergency_contact"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "3acbe7d4-3df5-1648-4ffd-11efcded2d43",
      "name": "HealthPermit Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "f1850786-b236-75a4-5d79-92d7b180d846",
          "name": "/health_permit",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d67a15b7-3fff-41f7-9462-0885eb107be9",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"permit_id\", jsonData.health_permit.id);",
                  "",
                  "tests[\"health_permit_type is Verde\"] = jsonData.health_permit.health_permit_type === \"Verde\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.health_permit.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.health_permit.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.health_permit.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Health permit created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"health_permit_type\": \"Verde\",\r\n    \"issue_date\": \"2018-01-01\",\r\n    \"expiration_date\": \"2019-01-01\",\r\n    \"employee_id\": 1\r\n}"
            },
            "url": "{{url}}/health_permit"
          },
          "response": []
        },
        {
          "_postman_id": "1765c379-57f6-3256-43f0-930b217a4308",
          "name": "/health_permit/<int:permit_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3626d836-e00a-47c1-b8a1-55067dccd616",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"health_permit_type is Verde\"] = jsonData.health_permit_type === \"Verde\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/health_permit/{{permit_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "d439995c-031e-4828-f0c6-0cd23d6d21b6",
          "name": "/health_permit/<int:permit_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f30a4d8c-3d34-4518-a9f2-174c2ac85960",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"health_permit_type is Blanco\"] = jsonData.health_permit.health_permit_type === \"Blanco\";",
                  "",
                  "tests[\"issue_date is 2018-01-31\"] = jsonData.health_permit.issue_date === \"2018-01-31\";",
                  "",
                  "tests[\"expiration_date is 2019-01-31\"] = jsonData.health_permit.expiration_date === \"2019-01-31\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.health_permit.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Health permit updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"health_permit_type\": \"Blanco\",\r\n    \"issue_date\": \"2018-01-31\",\r\n    \"expiration_date\": \"2019-01-31\",\r\n    \"employee_id\": 1\r\n}"
            },
            "url": "{{url}}/health_permit/{{permit_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "821e304c-b809-84c6-6914-c3da09c96fb4",
          "name": "/health_permit/<int:permit_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "35429330-c8e1-4789-abfe-9f27436d5ef5",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Health permit deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 300 ms\"] = responseTime < 300;",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/health_permit/{{permit_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "76121e34-afcc-c53c-0591-a3ebc24fc78a",
          "name": "/health_permit/<int:permit_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a9d1f807-3168-4ae1-a6da-c132d572ee6a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Health permit deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/health_permit/{{permit_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "37291dc4-cf18-18f9-133f-8fab22f4aad3",
          "name": "/health_permit",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "750d4543-cfa2-4d2b-b3ba-a3101989fc28",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"permit_id\", jsonData.health_permit.id);",
                  "",
                  "tests[\"health_permit_type is Verde\"] = jsonData.health_permit.health_permit_type === \"Verde\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.health_permit.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.health_permit.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.health_permit.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Health permit created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"health_permit_type\": \"Verde\",\r\n    \"issue_date\": \"2018-01-01\",\r\n    \"expiration_date\": \"2019-01-01\",\r\n    \"employee_id\": 1\r\n}"
            },
            "url": "{{url}}/health_permit"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "d5965368-94d3-a74e-8a59-164b0751d877",
      "name": "Country Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "1a14ca08-cb10-1c41-9518-d11bf4661d31",
          "name": "/countries",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "827874a4-df2e-4e80-abb1-e8136796879c",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"countries contains 17 items\"] = jsonData.countries.length === 17;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/countries"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "1d742c3e-64fe-11fb-372a-d69a1072a789",
      "name": "Passport Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "d0669b91-7ea3-59e8-7f2c-03f7506ceea5",
          "name": "/passport",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5315921a-adaf-4770-9b50-e5aac91fb3da",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"passport_id\", jsonData.passport.id);",
                  "",
                  "tests[\"passport_number is 123456\"] = jsonData.passport.passport_number === \"123456\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.passport.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.passport.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.passport.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"country_id is correct\"] = jsonData.passport.country_id ===  1;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Passport created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"passport_number\": \"123456\",\r\n    \"issue_date\": \"2018-01-01\",\r\n    \"expiration_date\": \"2019-01-01\",\r\n    \"employee_id\": 1,\r\n    \"country_id\": 1\r\n}"
            },
            "url": "{{url}}/passport"
          },
          "response": []
        },
        {
          "_postman_id": "f2dc7ed6-0d19-61bc-0118-8f4c4e519c1a",
          "name": "/passport/<int:passport_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "28f43fd1-a746-4d2d-bf42-af377d6634ad",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"passport_number is 123456\"] = jsonData.passport_number === \"123456\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"country_id is correct\"] = jsonData.country_id ===  1;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/passport/{{passport_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "732f5d9d-f079-97b0-f3f8-01535d940bee",
          "name": "/passport/<int:passport_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2fd331cb-a729-4001-96da-da5ea7f1b41a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"passport_number is 654321\"] = jsonData.passport.passport_number === \"654321\";",
                  "",
                  "tests[\"issue_date is 2018-01-31\"] = jsonData.passport.issue_date === \"2018-01-31\";",
                  "",
                  "tests[\"expiration_date is 2019-01-31\"] = jsonData.passport.expiration_date === \"2019-01-31\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.passport.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"country_id is correct\"] = jsonData.passport.country_id ===  2;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Passport updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"passport_number\": \"654321\",\r\n    \"issue_date\": \"2018-01-31\",\r\n    \"expiration_date\": \"2019-01-31\",\r\n    \"employee_id\": 1,\r\n    \"country_id\": 2\r\n}"
            },
            "url": "{{url}}/passport/{{passport_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "f7fca6c0-3221-c5c7-c417-13eab75c4424",
          "name": "/passport/<int:passport_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af377f9d-b6e3-4e30-ae2a-c8961e672acd",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Passport deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/passport/{{passport_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "b0304a92-fe00-4b9c-a947-619647006d45",
          "name": "/passport",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2956b831-3583-4424-bb0c-14b67cf6dc4d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"passport_id\", jsonData.passport.id);",
                  "",
                  "tests[\"passport_number is 123456\"] = jsonData.passport.passport_number === \"123456\";",
                  "",
                  "tests[\"issue_date is 2018-01-01\"] = jsonData.passport.issue_date === \"2018-01-01\";",
                  "",
                  "tests[\"expiration_date is 2019-01-01\"] = jsonData.passport.expiration_date === \"2019-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.passport.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"country_id is correct\"] = jsonData.passport.country_id ===  1;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Passport created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"passport_number\": \"123456\",\r\n    \"issue_date\": \"2018-01-01\",\r\n    \"expiration_date\": \"2019-01-01\",\r\n    \"employee_id\": 1,\r\n    \"country_id\": 1\r\n}"
            },
            "url": "{{url}}/passport"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "10e38b05-d1de-0eac-0a86-a556a0856b36",
      "name": "UniformItem Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "d54920ec-7955-c138-eb6d-05ececf7f845",
          "name": "/uniform_item",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "238fc17c-fa43-430e-b4b2-e61a6e840c6b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"item_id\", jsonData.uniform_item.id);",
                  "",
                  "tests['item_name is test_u_i'] = jsonData.uniform_item.item_name === \"test_u_i\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.uniform_item.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['uniform_sizes is empty list'] = jsonData.uniform_item.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform item created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"item_name\": \"test_u_i\",\n  \"organization_id\": {{organization_id}}\n}"
            },
            "url": "{{url}}/uniform_item"
          },
          "response": []
        },
        {
          "_postman_id": "87cd4f32-b476-e1c3-f70e-8feb273e0133",
          "name": "/uniform_item/<int:item_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a386dd24-2a60-4a7c-87df-5a65975e3401",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"item_name is test_u_i\"] = jsonData.item_name === \"test_u_i\";",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['uniform_sizes is empty list'] = jsonData.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/uniform_item/{{item_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "969f2fa1-cb71-9f5e-823e-60cee7425194",
          "name": "/uniform_item/<id:item_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7bde2373-e939-4e8c-b514-92acc17f02ac",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['item_name is new_test_u_i'] = jsonData.uniform_item.item_name === \"new_test_u_i\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.uniform_item.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform item updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"item_name\": \"new_test_u_i\", \n  \"organization_id\": {{organization_id}}\n}"
            },
            "url": "{{url}}/uniform_item/{{item_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "2ec6b741-526b-b5d2-6db1-d6b2182dc3d4",
          "name": "/uniform_item/<id:item_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d016a305-4380-4db7-bf86-1982063950e0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform item deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/uniform_item/{{item_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "b7ce0d12-37f6-6bfe-2a35-4fabb5b54a18",
          "name": "/uniform_item",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1956b7f9-d606-4700-83f6-38f930e11c4a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"item_id\", jsonData.uniform_item.id);",
                  "",
                  "tests['item_name is test_u_i'] = jsonData.uniform_item.item_name === \"test_u_i\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.uniform_item.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests['uniform_sizes is empty list'] = jsonData.uniform_item.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform item created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"item_name\": \"test_u_i\",\n  \"organization_id\": {{organization_id}}\n}"
            },
            "url": "{{url}}/uniform_item"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "afdc7848-b47c-5bac-0c43-3fe03ac47ba0",
      "name": "UniformSize Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "bebca2e5-363a-b028-c05a-e7578c2bb832",
          "name": "/uniform_size",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7001aef9-7a6e-4c67-a4d6-b09fefe363dd",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"size_id\", jsonData.uniform_size.id);",
                  "",
                  "tests['size_description is test_u_s'] = jsonData.uniform_size.size_description === \"test_u_s\";",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_size.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "//tests['uniform_sizes is empty list'] = jsonData.uniform_size.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform size created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"size_description\": \"test_u_s\",\n  \"uniform_item_id\": {{item_id}}\n}"
            },
            "url": "{{url}}/uniform_size"
          },
          "response": []
        },
        {
          "_postman_id": "c1d4ad6d-0d82-d902-58a4-74a22fc507e4",
          "name": "/uniform_size (second size)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23c64073-cee1-4193-a001-8193822d6ea0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"size_id_2\", jsonData.uniform_size.id);",
                  "",
                  "tests['size_description is test_u_s_2'] = jsonData.uniform_size.size_description === \"test_u_s_2\";",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_size.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "//tests['uniform_sizes is empty list'] = jsonData.uniform_size.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform size created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"size_description\": \"test_u_s_2\",\n  \"uniform_item_id\": {{item_id}}\n}"
            },
            "url": "{{url}}/uniform_size"
          },
          "response": []
        },
        {
          "_postman_id": "ff7de1bd-7916-3d0c-073a-532fa7433d6f",
          "name": "/uniform_size/<int:size_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "babe0c28-52a8-48fc-9659-c27c7d7c9d97",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"size_description is test_u_s\"] = jsonData.size_description === \"test_u_s\";",
                  "",
                  "tests[\"uniform_item_id is correct\"] = jsonData.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "//tests['uniform_sizes is empty list'] = jsonData.uniform_item.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/uniform_size/{{size_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "5e31d4b0-50d2-1680-3f42-bf83dee59cca",
          "name": "/uniform_size/<id:size_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db155c3d-d4c3-4892-b6bb-9a431f37abf2",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['size_description is new_test_u_i'] = jsonData.uniform_size.size_description === \"new_test_u_s\";",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_size.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "//tests['uniform_sizes is empty list'] = jsonData.uniform_size.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform size updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"size_description\": \"new_test_u_s\", \n  \"uniform_item_id\": {{item_id}}\n}"
            },
            "url": "{{url}}/uniform_size/{{size_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "fb03220b-06c9-509d-facd-60c8065b5af4",
          "name": "/uniform_size/<id:size_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3becb7a3-0ced-44d2-8f6b-5790e27870fe",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform size deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/uniform_size/{{size_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "286dd6f2-1f4f-9005-8b70-abe6ff3c4c3f",
          "name": "/uniform_size",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd54326c-ab9b-4353-ab20-98990adcc4ba",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"size_id\", jsonData.uniform_size.id);",
                  "",
                  "tests['size_description is test_u_s'] = jsonData.uniform_size.size_description === \"test_u_s\";",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_size.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "//tests['uniform_sizes is empty list'] = jsonData.uniform_size.uniform_sizes.length === 0;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform size created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"size_description\": \"test_u_s\",\n  \"uniform_item_id\": {{item_id}}\n}"
            },
            "url": "{{url}}/uniform_size"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "id": "50e417ec-5d2c-4eba-b213-29ff642dbf1c",
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              ""
            ],
            "id": "df7cf08c-11af-4cba-9882-be890289158c",
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "_postman_id": "1fee8860-84c4-c65f-7248-be5f16b1dee3",
      "name": "UniformRequirement Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "eb900835-4714-1537-8b63-84bb20138cd4",
          "name": "/uniform_requirement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "451a4501-1c40-4d64-b64c-3e7184c776d3",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"requirement_id\", jsonData.uniform_requirement.id);",
                  "",
                  "tests['employee_id is correct'] = jsonData.uniform_requirement.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_requirement.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "tests['uniform_size_id is correct'] = jsonData.uniform_requirement.uniform_size_id === parseInt(environment.size_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform requirement created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"employee_id\": {{employee_id}},\n  \"uniform_item_id\": {{item_id}},\n  \"uniform_size_id\": {{size_id}}\n}"
            },
            "url": "{{url}}/uniform_requirement"
          },
          "response": []
        },
        {
          "_postman_id": "a36abfdc-6de4-6ce6-9362-0cfc4e3df8e7",
          "name": "/uniform_requirement/<int:requirement_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "946292fe-040f-4a54-8306-3457ce1e5681",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['employee_id is correct'] = jsonData.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "tests['uniform_size_id is correct'] = jsonData.uniform_size_id === parseInt(environment.size_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/uniform_requirement/{{requirement_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "4a26e66c-d0cf-8449-302c-7a22e9adb3e9",
          "name": "/uniform_requirement/<id:requirement_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4348deab-03bf-4da1-85bf-691167332b0b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['employee_id is correct'] = jsonData.uniform_requirement.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_requirement.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "tests['uniform_size_id is correct'] = jsonData.uniform_requirement.uniform_size_id === parseInt(environment.size_id_2);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform requirement updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"employee_id\": {{employee_id}},\n  \"uniform_item_id\": {{item_id}},\n  \"uniform_size_id\": {{size_id_2}}\n}"
            },
            "url": "{{url}}/uniform_requirement/{{requirement_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "316d0543-91bf-e1d4-a4c2-cc5646970cb8",
          "name": "/uniform_requirement/<id:requirement_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "550b87b7-ad00-411d-b102-17839bf730be",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform requirement deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/uniform_requirement/{{requirement_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "fbb6b836-f938-80fa-ab12-6ec9ccb8f89a",
          "name": "/uniform_requirement",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4feb215c-ffd0-4d7b-ab9f-4caceb03ac0b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"requirement_id\", jsonData.uniform_requirement.id);",
                  "",
                  "tests['employee_id is correct'] = jsonData.uniform_requirement.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['uniform_item_id is correct'] = jsonData.uniform_requirement.uniform_item_id === parseInt(environment.item_id);",
                  "",
                  "tests['uniform_size_id is correct'] = jsonData.uniform_requirement.uniform_size_id === parseInt(environment.size_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Uniform requirement created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"employee_id\": {{employee_id}},\n  \"uniform_item_id\": {{item_id}},\n  \"uniform_size_id\": {{size_id}}\n}"
            },
            "url": "{{url}}/uniform_requirement"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "13a16afe-d64a-64fa-9d89-5e3cb4484c08",
      "name": "Bank Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "edf80b82-500a-469b-30ac-eae825a1240d",
          "name": "/banks",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b05dfe74-f154-47c0-a514-eae1ce9514f6",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"banks contains 17 items\"] = jsonData.banks.length === 46;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/banks"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "aa22cf6e-6932-b664-6c14-fae1481edf27",
      "name": "BankAccount Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "5c27964b-7035-aa62-33e3-ed8892d07694",
          "name": "/bank_account",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "96abd1c5-2314-4b23-adab-0f59f55bbdea",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"account_id\", jsonData.bank_account.id);",
                  "",
                  "tests['is_active is true'] = jsonData.bank_account.is_active;",
                  "",
                  "tests['account_number is 1234'] = jsonData.bank_account.account_number === \"1234\";",
                  "",
                  "tests['account_type is Corriente'] = jsonData.bank_account.account_type === \"Corriente\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.bank_account.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['bank_id is correct'] = jsonData.bank_account.bank_id === 1;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Bank account created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_number\": \"1234\",\n  \"account_type\": \"Corriente\",\n  \"is_active\": true,\n  \"employee_id\": {{employee_id}},\n  \"bank_id\": 1\n}"
            },
            "url": "{{url}}/bank_account"
          },
          "response": []
        },
        {
          "_postman_id": "0e9d64ae-b648-ee11-5e2b-70417dd2dd14",
          "name": "/bank_account/<int:account_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "799d071d-f4a8-4607-9114-2900a99f36ec",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['is_active is true'] = jsonData.is_active;",
                  "",
                  "tests['account_number is 1234'] = jsonData.account_number === \"1234\";",
                  "",
                  "tests['account_type is Corriente'] = jsonData.account_type === \"Corriente\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['bank_id is correct'] = jsonData.bank_id === 1;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/bank_account/{{account_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "e7b51580-5d36-c9ac-274b-0a5a51ad46ba",
          "name": "/bank_account/<int:account_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "253dc49b-1898-4668-95d2-cda3e0b1a7bf",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['is_active is true'] = jsonData.bank_account.is_active;",
                  "",
                  "tests['account_number is 4321'] = jsonData.bank_account.account_number === \"4321\";",
                  "",
                  "tests['account_type is Ahorro'] = jsonData.bank_account.account_type === \"Ahorro\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.bank_account.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['bank_id is correct'] = jsonData.bank_account.bank_id === 2;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Bank account updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"account_number\": \"4321\",\n  \"account_type\": \"Ahorro\",\n  \"is_active\": true,\n  \"employee_id\": {{employee_id}},\n  \"bank_id\": 2\n}"
            },
            "url": "{{url}}/bank_account/{{account_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "d307633a-5d51-9fd3-2eb0-26426b0e90e6",
          "name": "/bank_account/<int:account_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f01f6d45-7754-474c-ac0e-d27e1456d53b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Bank account is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/bank_account/{{account_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "1ebf47d0-4d2c-15f2-8353-b1b3322dbdbc",
          "name": "/activate_bank_account/<int:account_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5aeb0f8f-d21a-4d1d-95aa-628d76760e0f",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Bank account is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_bank_account/{{account_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "a3d81439-d8a1-7553-e21b-9d19eda37fca",
      "name": "FamilyRelation Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "a2b88521-9b65-f5bd-a684-af8c20494c85",
          "name": "/family_relations",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46c9ac83-d9b0-42b3-9db4-f48b37a48f20",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"family_relations contains 5 items\"] = jsonData.family_relations.length === 6;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < 500;",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"root\", \n  \"is_active\": True\n}"
            },
            "url": "{{url}}/family_relations"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "f9dd89a7-53f3-a9f0-b586-4d5973fd772e",
      "name": "Dependent Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "2a1334e5-a418-aa6e-5e55-54af88bcb3cb",
          "name": "/dependent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1dec3dee-9aed-4852-9172-e60d3a8142fc",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"dependent_id\", jsonData.dependent.id);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.dependent.first_name === \"f_n\";",
                  "",
                  "tests[\"second_name is s_n\"] = jsonData.dependent.second_name === \"s_n\";",
                  "",
                  "tests[\"first_surname is f_sn\"] = jsonData.dependent.first_surname === \"f_sn\";",
                  "",
                  "tests[\"second_surname is s_sn\"] = jsonData.dependent.second_surname === \"s_sn\";",
                  "",
                  "tests[\"gender is Mujer\"] = jsonData.dependent.gender === \"Mujer\";",
                  "",
                  "tests[\"date_of_birth is 2018-01-01\"] = jsonData.dependent.date_of_birth === \"2018-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.dependent.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"family_relation_id is correct\"] = jsonData.dependent.family_relation_id ===  1;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Dependent created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"f_n\",\r\n    \"second_name\": \"s_n\",\r\n    \"first_surname\": \"f_sn\",\r\n    \"second_surname\": \"s_sn\",\r\n    \"gender\": \"Mujer\",\r\n    \"date_of_birth\": \"2018-01-01\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"family_relation_id\": 1\r\n}"
            },
            "url": "{{url}}/dependent"
          },
          "response": []
        },
        {
          "_postman_id": "c8c0936e-ffa7-14be-b1db-ee3c4a27b4da",
          "name": "/dependent/<int:dependent_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50301a2a-c843-4858-b738-0c5b8aa3f659",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.first_name === \"f_n\";",
                  "",
                  "tests[\"second_name is s_n\"] = jsonData.second_name === \"s_n\";",
                  "",
                  "tests[\"first_surname is f_sn\"] = jsonData.first_surname === \"f_sn\";",
                  "",
                  "tests[\"second_surname is s_sn\"] = jsonData.second_surname === \"s_sn\";",
                  "",
                  "tests[\"gender is Mujer\"] = jsonData.gender === \"Mujer\";",
                  "",
                  "tests[\"date_of_birth is 2018-01-01\"] = jsonData.date_of_birth === \"2018-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"family_relation_id is correct\"] = jsonData.family_relation_id ===  1;",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/dependent/{{dependent_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "447f9b60-ae40-9d87-1df3-6ae8b01fe3fa",
          "name": "/dependent/<id:dependent_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c081c9e-1319-42b9-8ca5-d5807ee40072",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"first_name is new_f_n\"] = jsonData.dependent.first_name === \"new_f_n\";",
                  "",
                  "tests[\"second_name is new_s_n\"] = jsonData.dependent.second_name === \"new_s_n\";",
                  "",
                  "tests[\"first_surname is new_f_sn\"] = jsonData.dependent.first_surname === \"new_f_sn\";",
                  "",
                  "tests[\"second_surname is new_s_sn\"] = jsonData.dependent.second_surname === \"new_s_sn\";",
                  "",
                  "tests[\"gender is Hombre\"] = jsonData.dependent.gender === \"Hombre\";",
                  "",
                  "tests[\"date_of_birth is 2018-01-31\"] = jsonData.dependent.date_of_birth === \"2018-01-31\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.dependent.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"family_relation_id is correct\"] = jsonData.dependent.family_relation_id ===  2;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Dependent updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"new_f_n\",\r\n    \"second_name\": \"new_s_n\",\r\n    \"first_surname\": \"new_f_sn\",\r\n    \"second_surname\": \"new_s_sn\",\r\n    \"gender\": \"Hombre\",\r\n    \"date_of_birth\": \"2018-01-31\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"family_relation_id\": 2\r\n}"
            },
            "url": "{{url}}/dependent/{{dependent_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "059c44a7-358f-846d-912f-ef48225088d9",
          "name": "/dependent/<int:dependent_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "030d98aa-a814-4c43-b7c0-f21eac1943ff",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Dependent deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/dependent/{{dependent_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "a71e46b8-5819-4b82-9285-8551ff6da2f1",
          "name": "/dependent",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2102e501-edc6-41f1-a43b-c1754c5d1489",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"dependent_id\", jsonData.dependent.id);",
                  "",
                  "tests[\"first_name is f_n\"] = jsonData.dependent.first_name === \"f_n\";",
                  "",
                  "tests[\"second_name is s_n\"] = jsonData.dependent.second_name === \"s_n\";",
                  "",
                  "tests[\"first_surname is f_sn\"] = jsonData.dependent.first_surname === \"f_sn\";",
                  "",
                  "tests[\"second_surname is s_sn\"] = jsonData.dependent.second_surname === \"s_sn\";",
                  "",
                  "tests[\"gender is Mujer\"] = jsonData.dependent.gender === \"Mujer\";",
                  "",
                  "tests[\"date_of_birth is 2018-01-01\"] = jsonData.dependent.date_of_birth === \"2018-01-01\";",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.dependent.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"family_relation_id is correct\"] = jsonData.dependent.family_relation_id ===  1;",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Dependent created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"first_name\": \"f_n\",\r\n    \"second_name\": \"s_n\",\r\n    \"first_surname\": \"f_sn\",\r\n    \"second_surname\": \"s_sn\",\r\n    \"gender\": \"Mujer\",\r\n    \"date_of_birth\": \"2018-01-01\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"family_relation_id\": 1\r\n}"
            },
            "url": "{{url}}/dependent"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "d576a634-4491-706c-345a-1b54e52c04cb",
      "name": "Schedule Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "76756fba-9f7d-a865-96ff-d2c717c4cbd3",
          "name": "/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b21c9d2e-06b3-4bfc-9ed2-0e0fea9c48ce",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"schedule_id\", jsonData.schedule.id);",
                  "",
                  "tests['start_date is 2018-01-01'] = jsonData.schedule.start_date === \"2018-01-01\";",
                  "",
                  "tests['department_id is correct'] = jsonData.schedule.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"start_date\": \"2018-01-01\",\n  \"department_id\": {{department_id}}\n}"
            },
            "url": "{{url}}/schedule"
          },
          "response": []
        },
        {
          "_postman_id": "0f80220e-bcca-45a0-bf84-e0b6bfd86741",
          "name": "/schedule/<int:schedule_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "00bc8579-dfd6-4505-961c-e77f8e2efb12",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['start_date is 2018-01-01'] = jsonData.start_date === \"2018-01-01\";",
                  "",
                  "tests['department_id is correct'] = jsonData.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/schedule/{{schedule_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "93a03c86-5d98-6b56-19b6-0122cd56dd25",
          "name": "/schedule/<int:schedule_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72b97823-c8be-4043-a527-f571afdd0de0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['start_date is 2018-01-31'] = jsonData.schedule.start_date === \"2018-01-31\";",
                  "",
                  "tests['department_id is correct'] = jsonData.schedule.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"start_date\": \"2018-01-31\",\n  \"department_id\": {{department_id}}\n}"
            },
            "url": "{{url}}/schedule/{{schedule_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "de00b203-08b2-bd57-4cbc-300e1af99e7a",
          "name": "/schedule/<int:schedule_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "94058a6b-0ed2-4c52-a3fe-a40c1c7f1500",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/schedule/{{schedule_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "0b6d3d21-a83b-53c4-65dd-1a3ead0e8b56",
          "name": "/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f724d244-f234-4b61-aae7-3e96a03a36c0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"schedule_id\", jsonData.schedule.id);",
                  "",
                  "tests['start_date is 2018-01-01'] = jsonData.schedule.start_date === \"2018-01-01\";",
                  "",
                  "tests['department_id is correct'] = jsonData.schedule.department_id === parseInt(environment.department_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"start_date\": \"2018-01-01\",\n  \"department_id\": {{department_id}}\n}"
            },
            "url": "{{url}}/schedule"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "e311d835-63a8-4155-a8d7-aeba654c2e1d",
      "name": "ScheduleDetail Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "4d93acda-a2c8-46f6-8681-e5efbeb840e1",
          "name": "/schedule_detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d11189d3-60f1-470f-928a-fecfe389e3d0",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"schedule_detail_id\", jsonData.schedule_detail.id);",
                  "",
                  "tests['day_1_start is 2018-01-01T06:00:00'] = jsonData.schedule_detail.day_1_start === \"2018-01-01T06:00:00\";",
                  "",
                  "tests['day_1_end is 2018-01-01T14:00:00'] = jsonData.schedule_detail.day_1_end === \"2018-01-01T14:00:00\";",
                  "",
                  "tests['day_1_comment is comment 1'] = jsonData.schedule_detail.day_1_comment === \"comment 1\";",
                  "",
                  "tests['day_2_start is 2018-02-02T06:00:00'] = jsonData.schedule_detail.day_2_start === \"2018-01-02T06:00:00\";",
                  "",
                  "tests['day_2_end is 2018-01-02T14:00:00'] = jsonData.schedule_detail.day_2_end === \"2018-01-02T14:00:00\";",
                  "",
                  "tests['day_2_comment is comment 2'] = jsonData.schedule_detail.day_2_comment=== \"comment 2\";",
                  "",
                  "tests['day_3_start is 2018-01-03T06:00:00'] = jsonData.schedule_detail.day_3_start === \"2018-01-03T06:00:00\";",
                  "",
                  "tests['day_3_end is 2018-01-03T14:00:00'] = jsonData.schedule_detail.day_3_end === \"2018-01-03T14:00:00\";",
                  "",
                  "tests['day_3_comment is comment 3'] = jsonData.schedule_detail.day_3_comment === \"comment 3\";",
                  "",
                  "tests['day_4_start is 2018-01-04T06:00:00'] = jsonData.schedule_detail.day_4_start === \"2018-01-04T06:00:00\";",
                  "",
                  "tests['day_4_end is 2018-01-04T14:00:00'] = jsonData.schedule_detail.day_4_end === \"2018-01-04T14:00:00\";",
                  "",
                  "tests['day_4_comment is comment 4'] = jsonData.schedule_detail.day_4_comment === \"comment 4\";",
                  "",
                  "tests['day_5_start is null'] = jsonData.schedule_detail.day_5_start === null;",
                  "",
                  "tests['day_5_end is null'] = jsonData.schedule_detail.day_5_end === null;",
                  "",
                  "tests['day_5_comment is null'] = jsonData.schedule_detail.day_5_comment === null;",
                  "",
                  "tests['day_6_start is 2018-01-06T22:00:00'] = jsonData.schedule_detail.day_6_start === \"2018-01-06T22:00:00\";",
                  "",
                  "tests['day_6_end is 2018-01-07T06:00:00'] = jsonData.schedule_detail.day_6_end === \"2018-01-07T06:00:00\";",
                  "",
                  "tests['day_6_comment is comment 6'] = jsonData.schedule_detail.day_6_comment === \"comment 6\";",
                  "",
                  "tests['day_7_start is 2018-01-07T22:00:00'] = jsonData.schedule_detail.day_7_start === \"2018-01-07T22:00:00\";",
                  "",
                  "tests['day_7_end is 2018-01-08T06:00:00'] = jsonData.schedule_detail.day_7_end === \"2018-01-08T06:00:00\";",
                  "",
                  "tests['day_7_comment is comment 7'] = jsonData.schedule_detail.day_7_comment === \"comment 7\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.schedule_detail.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['schedule_id is correct'] = jsonData.schedule_detail.schedule_id === parseInt(environment.schedule_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule detail created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"day_1_start\": \"2018-01-01 06:00:00\",\r\n    \"day_1_end\": \"2018-01-01 14:00:00\",\r\n    \"day_1_comment\": \"comment 1\",\r\n    \"day_2_start\": \"2018-01-02 06:00:00\",\r\n    \"day_2_end\": \"2018-01-02 14:00:00\",\r\n    \"day_2_comment\": \"comment 2\",\r\n    \"day_3_start\": \"2018-01-03 06:00:00\",\r\n    \"day_3_end\": \"2018-01-03 14:00:00\",\r\n    \"day_3_comment\": \"comment 3\",\r\n    \"day_4_start\": \"2018-01-04 06:00:00\",\r\n    \"day_4_end\": \"2018-01-04 14:00:00\",\r\n    \"day_4_comment\": \"comment 4\",\r\n    \"day_5_start\": null,\r\n    \"day_5_end\": null,\r\n    \"day_5_comment\": null,\r\n    \"day_6_start\": \"2018-01-06 22:00:00\",\r\n    \"day_6_end\": \"2018-01-07 06:00:00\",\r\n    \"day_6_comment\": \"comment 6\",\r\n    \"day_7_start\": \"2018-01-07 22:00:00\",\r\n    \"day_7_end\": \"2018-01-08 06:00:00\",\r\n    \"day_7_comment\": \"comment 7\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"schedule_id\": {{schedule_id}}\r\n}"
            },
            "url": "{{url}}/schedule_detail"
          },
          "response": []
        },
        {
          "_postman_id": "73a1926e-d2ed-f7e4-17ea-c74497d893f8",
          "name": "/schedule_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3303ae1c-2d6e-4755-879c-35b75b9d0e26",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['day_1_start is 2018-01-01T06:00:00'] = jsonData.day_1_start === \"2018-01-01T06:00:00\";",
                  "",
                  "tests['day_1_end is 2018-01-01T14:00:00'] = jsonData.day_1_end === \"2018-01-01T14:00:00\";",
                  "",
                  "tests['day_1_comment is comment 1'] = jsonData.day_1_comment === \"comment 1\";",
                  "",
                  "tests['day_2_start is 2018-02-02T06:00:00'] = jsonData.day_2_start === \"2018-01-02T06:00:00\";",
                  "",
                  "tests['day_2_end is 2018-01-02T14:00:00'] = jsonData.day_2_end === \"2018-01-02T14:00:00\";",
                  "",
                  "tests['day_2_comment is comment 2'] = jsonData.day_2_comment=== \"comment 2\";",
                  "",
                  "tests['day_3_start is 2018-01-03T06:00:00'] = jsonData.day_3_start === \"2018-01-03T06:00:00\";",
                  "",
                  "tests['day_3_end is 2018-01-03T14:00:00'] = jsonData.day_3_end === \"2018-01-03T14:00:00\";",
                  "",
                  "tests['day_3_comment is comment 3'] = jsonData.day_3_comment === \"comment 3\";",
                  "",
                  "tests['day_4_start is 2018-01-04T06:00:00'] = jsonData.day_4_start === \"2018-01-04T06:00:00\";",
                  "",
                  "tests['day_4_end is 2018-01-04T14:00:00'] = jsonData.day_4_end === \"2018-01-04T14:00:00\";",
                  "",
                  "tests['day_4_comment is comment 4'] = jsonData.day_4_comment === \"comment 4\";",
                  "",
                  "tests['day_5_start is null'] = jsonData.day_5_start === null;",
                  "",
                  "tests['day_5_end is null'] = jsonData.day_5_end === null;",
                  "",
                  "tests['day_5_comment is null'] = jsonData.day_5_comment === null;",
                  "",
                  "tests['day_6_start is 2018-01-06T22:00:00'] = jsonData.day_6_start === \"2018-01-06T22:00:00\";",
                  "",
                  "tests['day_6_end is 2018-01-07T06:00:00'] = jsonData.day_6_end === \"2018-01-07T06:00:00\";",
                  "",
                  "tests['day_6_comment is comment 6'] = jsonData.day_6_comment === \"comment 6\";",
                  "",
                  "tests['day_7_start is 2018-01-07T22:00:00'] = jsonData.day_7_start === \"2018-01-07T22:00:00\";",
                  "",
                  "tests['day_7_end is 2018-01-08T06:00:00'] = jsonData.day_7_end === \"2018-01-08T06:00:00\";",
                  "",
                  "tests['day_7_comment is comment 7'] = jsonData.day_7_comment === \"comment 7\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['schedule_id is correct'] = jsonData.schedule_id === parseInt(environment.schedule_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/schedule_detail/{{schedule_detail_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "58b18112-60e3-4050-a193-4dbf6eb3b313",
          "name": "/schedule_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38ae8afe-f476-47b3-8ea3-30297d4f2e5c",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['day_1_start is 2018-02-01T06:00:00'] = jsonData.schedule_detail.day_1_start === \"2018-02-01T06:00:00\";",
                  "",
                  "tests['day_1_end is 2018-02-01T14:00:00'] = jsonData.schedule_detail.day_1_end === \"2018-02-01T14:00:00\";",
                  "",
                  "tests['day_1_comment is comment 1'] = jsonData.schedule_detail.day_1_comment === \"comment 1\";",
                  "",
                  "tests['day_2_start is 2018-02-02T06:00:00'] = jsonData.schedule_detail.day_2_start === \"2018-02-02T06:00:00\";",
                  "",
                  "tests['day_2_end is 2018-02-02T14:00:00'] = jsonData.schedule_detail.day_2_end === \"2018-02-02T14:00:00\";",
                  "",
                  "tests['day_2_comment is comment 2'] = jsonData.schedule_detail.day_2_comment=== \"comment 2\";",
                  "",
                  "tests['day_3_start is 2018-02-03T06:00:00'] = jsonData.schedule_detail.day_3_start === \"2018-02-03T06:00:00\";",
                  "",
                  "tests['day_3_end is 2018-02-03T14:00:00'] = jsonData.schedule_detail.day_3_end === \"2018-02-03T14:00:00\";",
                  "",
                  "tests['day_3_comment is comment 3'] = jsonData.schedule_detail.day_3_comment === \"comment 3\";",
                  "",
                  "tests['day_4_start is 2018-02-04T06:00:00'] = jsonData.schedule_detail.day_4_start === \"2018-02-04T06:00:00\";",
                  "",
                  "tests['day_4_end is 2018-02-04T14:00:00'] = jsonData.schedule_detail.day_4_end === \"2018-02-04T14:00:00\";",
                  "",
                  "tests['day_4_comment is comment 4'] = jsonData.schedule_detail.day_4_comment === \"comment 4\";",
                  "",
                  "tests['day_5_start is null'] = jsonData.schedule_detail.day_5_start === null;",
                  "",
                  "tests['day_5_end is null'] = jsonData.schedule_detail.day_5_end === null;",
                  "",
                  "tests['day_5_comment is null'] = jsonData.schedule_detail.day_5_comment === null;",
                  "",
                  "tests['day_6_start is 2018-02-06T22:00:00'] = jsonData.schedule_detail.day_6_start === \"2018-02-06T22:00:00\";",
                  "",
                  "tests['day_6_end is 2018-02-07T06:00:00'] = jsonData.schedule_detail.day_6_end === \"2018-02-07T06:00:00\";",
                  "",
                  "tests['day_6_comment is comment 6'] = jsonData.schedule_detail.day_6_comment === \"comment 6\";",
                  "",
                  "tests['day_7_start is 2018-02-07T22:00:00'] = jsonData.schedule_detail.day_7_start === \"2018-02-07T22:00:00\";",
                  "",
                  "tests['day_7_end is 2018-02-08T06:00:00'] = jsonData.schedule_detail.day_7_end === \"2018-02-08T06:00:00\";",
                  "",
                  "tests['day_7_comment is comment 7'] = jsonData.schedule_detail.day_7_comment === \"comment 7\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.schedule_detail.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['schedule_id is correct'] = jsonData.schedule_detail.schedule_id === parseInt(environment.schedule_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule detail updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"day_1_start\": \"2018-02-01T06:00:00\",\r\n    \"day_1_end\": \"2018-02-01T14:00:00\",\r\n    \"day_1_comment\": \"comment 1\",\r\n    \"day_2_start\": \"2018-02-02T06:00:00\",\r\n    \"day_2_end\": \"2018-02-02T14:00:00\",\r\n    \"day_2_comment\": \"comment 2\",\r\n    \"day_3_start\": \"2018-02-03T06:00:00\",\r\n    \"day_3_end\": \"2018-02-03T14:00:00\",\r\n    \"day_3_comment\": \"comment 3\",\r\n    \"day_4_start\": \"2018-02-04T06:00:00\",\r\n    \"day_4_end\": \"2018-02-04T14:00:00\",\r\n    \"day_4_comment\": \"comment 4\",\r\n    \"day_5_start\": null,\r\n    \"day_5_end\": null,\r\n    \"day_5_comment\": null,\r\n    \"day_6_start\": \"2018-02-06T22:00:00\",\r\n    \"day_6_end\": \"2018-02-07T06:00:00\",\r\n    \"day_6_comment\": \"comment 6\",\r\n    \"day_7_start\": \"2018-02-07T22:00:00\",\r\n    \"day_7_end\": \"2018-02-08T06:00:00\",\r\n    \"day_7_comment\": \"comment 7\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"schedule_id\": {{schedule_id}}\r\n}"
            },
            "url": "{{url}}/schedule_detail/{{schedule_detail_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "f2320a78-cbc9-48fb-a14a-8d6067a65dea",
          "name": "/schedule_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "34f6a3cd-a4f9-49f7-80ce-ba632bdcc40a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule detail deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/schedule_detail/{{schedule_detail_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "49edd0f3-cabb-4b22-884a-1a57c1a1728f",
          "name": "/schedule_detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5ed773d7-ea39-4fe5-a781-e95540ae5b6d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"schedule_detail_id\", jsonData.schedule_detail.id);",
                  "",
                  "tests['day_1_start is 2018-01-01T06:00:00'] = jsonData.schedule_detail.day_1_start === \"2018-01-01T06:00:00\";",
                  "",
                  "tests['day_1_end is 2018-01-01T14:00:00'] = jsonData.schedule_detail.day_1_end === \"2018-01-01T14:00:00\";",
                  "",
                  "tests['day_1_comment is comment 1'] = jsonData.schedule_detail.day_1_comment === \"comment 1\";",
                  "",
                  "tests['day_2_start is 2018-02-02T06:00:00'] = jsonData.schedule_detail.day_2_start === \"2018-01-02T06:00:00\";",
                  "",
                  "tests['day_2_end is 2018-01-02T14:00:00'] = jsonData.schedule_detail.day_2_end === \"2018-01-02T14:00:00\";",
                  "",
                  "tests['day_2_comment is comment 2'] = jsonData.schedule_detail.day_2_comment=== \"comment 2\";",
                  "",
                  "tests['day_3_start is 2018-01-03T06:00:00'] = jsonData.schedule_detail.day_3_start === \"2018-01-03T06:00:00\";",
                  "",
                  "tests['day_3_end is 2018-01-03T14:00:00'] = jsonData.schedule_detail.day_3_end === \"2018-01-03T14:00:00\";",
                  "",
                  "tests['day_3_comment is comment 3'] = jsonData.schedule_detail.day_3_comment === \"comment 3\";",
                  "",
                  "tests['day_4_start is 2018-01-04T06:00:00'] = jsonData.schedule_detail.day_4_start === \"2018-01-04T06:00:00\";",
                  "",
                  "tests['day_4_end is 2018-01-04T14:00:00'] = jsonData.schedule_detail.day_4_end === \"2018-01-04T14:00:00\";",
                  "",
                  "tests['day_4_comment is comment 4'] = jsonData.schedule_detail.day_4_comment === \"comment 4\";",
                  "",
                  "tests['day_5_start is null'] = jsonData.schedule_detail.day_5_start === null;",
                  "",
                  "tests['day_5_end is null'] = jsonData.schedule_detail.day_5_end === null;",
                  "",
                  "tests['day_5_comment is null'] = jsonData.schedule_detail.day_5_comment === null;",
                  "",
                  "tests['day_6_start is 2018-01-06T22:00:00'] = jsonData.schedule_detail.day_6_start === \"2018-01-06T22:00:00\";",
                  "",
                  "tests['day_6_end is 2018-01-07T06:00:00'] = jsonData.schedule_detail.day_6_end === \"2018-01-07T06:00:00\";",
                  "",
                  "tests['day_6_comment is comment 6'] = jsonData.schedule_detail.day_6_comment === \"comment 6\";",
                  "",
                  "tests['day_7_start is 2018-01-07T22:00:00'] = jsonData.schedule_detail.day_7_start === \"2018-01-07T22:00:00\";",
                  "",
                  "tests['day_7_end is 2018-01-08T06:00:00'] = jsonData.schedule_detail.day_7_end === \"2018-01-08T06:00:00\";",
                  "",
                  "tests['day_7_comment is comment 7'] = jsonData.schedule_detail.day_7_comment === \"comment 7\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.schedule_detail.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests['schedule_id is correct'] = jsonData.schedule_detail.schedule_id === parseInt(environment.schedule_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Schedule detail created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"day_1_start\": \"2018-01-01T06:00:00\",\r\n    \"day_1_end\": \"2018-01-01T14:00:00\",\r\n    \"day_1_comment\": \"comment 1\",\r\n    \"day_2_start\": \"2018-01-02T06:00:00\",\r\n    \"day_2_end\": \"2018-01-02T14:00:00\",\r\n    \"day_2_comment\": \"comment 2\",\r\n    \"day_3_start\": \"2018-01-03T06:00:00\",\r\n    \"day_3_end\": \"2018-01-03T14:00:00\",\r\n    \"day_3_comment\": \"comment 3\",\r\n    \"day_4_start\": \"2018-01-04T06:00:00\",\r\n    \"day_4_end\": \"2018-01-04T14:00:00\",\r\n    \"day_4_comment\": \"comment 4\",\r\n    \"day_5_start\": null,\r\n    \"day_5_end\": null,\r\n    \"day_5_comment\": null,\r\n    \"day_6_start\": \"2018-01-06T22:00:00\",\r\n    \"day_6_end\": \"2018-01-07T06:00:00\",\r\n    \"day_6_comment\": \"comment 6\",\r\n    \"day_7_start\": \"2018-01-07T22:00:00\",\r\n    \"day_7_end\": \"2018-01-08T06:00:00\",\r\n    \"day_7_comment\": \"comment 7\",\r\n    \"employee_id\": {{employee_id}},\r\n    \"schedule_id\": {{schedule_id}}\r\n}"
            },
            "url": "{{url}}/schedule_detail"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "c5bae642-e0cd-494b-a75c-efc62cadd33c",
      "name": "Payment Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "c1660d7d-d051-4703-9e24-0971285b8ce4",
          "name": "/payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bb2735c1-5172-406b-9f81-d656cd1e132d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"payment_id\", jsonData.payment.id);",
                  "",
                  "tests['payment_date is 2018-01-01'] = jsonData.payment.payment_date === \"2018-01-01\";",
                  "",
                  "tests['document_number is 1234-abc'] = jsonData.payment.document_number === \"1234-abc\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.payment.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Payment created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"payment_date\": \"2018-01-01\",\r\n    \"document_number\": \"1234-abc\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/payment"
          },
          "response": []
        },
        {
          "_postman_id": "169692ad-a21e-4cf3-ba9b-6b99368176c5",
          "name": "/payment/<int:payment_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcaef288-b92e-4cf5-b1e2-999353ea251c",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['payment_date is 2018-01-01'] = jsonData.payment_date === \"2018-01-01\";",
                  "",
                  "tests['document_number is 1234-abc'] = jsonData.document_number === \"1234-abc\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/payment/{{payment_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "4911b125-9ab5-409d-8e16-3713cd88d0ac",
          "name": "/payment/<int:payment_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bbd98e36-eba0-48ff-a4cf-93027f2114db",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['payment_date is 2018-02-01'] = jsonData.payment.payment_date === \"2018-02-01\";",
                  "",
                  "tests['document_number is 1234-def'] = jsonData.payment.document_number === \"1234-def\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.payment.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Payment updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"payment_date\": \"2018-02-01\",\r\n    \"document_number\": \"1234-def\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/payment/{{payment_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "0c4cb23a-e99c-4a6c-89cc-b39be39554f6",
          "name": "/payment/<int:payment_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2c976d54-fb9b-4703-9836-99bdd06cac71",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Payment deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/payment/{{payment_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "80148611-ad26-40b5-ab45-1a63cac5594b",
          "name": "/payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4e2170c-27ac-45a7-b19f-8e6cd4d91d66",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"payment_id\", jsonData.payment.id);",
                  "",
                  "tests['payment_date is 2018-01-01'] = jsonData.payment.payment_date === \"2018-01-01\";",
                  "",
                  "tests['document_number is 1234-abc'] = jsonData.payment.document_number === \"1234-abc\";",
                  "",
                  "tests['employee_id is correct'] = jsonData.payment.employee_id === parseInt(environment.employee_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Payment created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"payment_date\": \"2018-01-01\",\r\n    \"document_number\": \"1234-abc\",\r\n    \"employee_id\": {{employee_id}}\r\n}"
            },
            "url": "{{url}}/payment"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "a3e98d90-4d8a-48eb-abc3-9b143421574f",
      "name": "Creditor Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "3290c15e-c5b6-4fc2-9d83-87165989200f",
          "name": "/creditor",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eba08b85-edf3-4dda-9b71-cc8ba0c45868",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"creditor_id\", jsonData.creditor.id);",
                  "",
                  "tests['is_active is true'] = jsonData.creditor.is_active;",
                  "",
                  "tests['creditor_name is test_cr'] = jsonData.creditor.creditor_name === \"test_cr\";",
                  "",
                  "tests['phone_number is 123-4567'] = jsonData.creditor.phone_number === \"123-4567\";",
                  "",
                  "tests['eamil is test@test_cr.com'] = jsonData.creditor.email === \"test@test_cr.com\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.creditor.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Creditor created successfully.\";",
                  "",
                  "/*tests['deductions is empty list'] = jsonData.creditor.deductions.length === 0;*/",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"creditor_name\": \"test_cr\",\n  \"phone_number\": \"123-4567\",\n  \"email\": \"test@test_cr.com\",\n  \"organization_id\": {{organization_id}},\n  \"is_active\": true\n}"
            },
            "url": "{{url}}/creditor"
          },
          "response": []
        },
        {
          "_postman_id": "0a923561-4442-490e-9d43-ae0fb1525960",
          "name": "/creditor/<int:creditor_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e1bb7e93-b53b-48e2-908d-e3b116410532",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests['creditor_name is test_cr'] = jsonData.creditor_name === \"test_cr\";",
                  "",
                  "tests['phone_number is 123-4567'] = jsonData.phone_number === \"123-4567\";",
                  "",
                  "tests['eamil is test@test_cr.com'] = jsonData.email === \"test@test_cr.com\";",
                  "",
                  "tests[\"organization_id is correct\"] = jsonData.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/creditor/{{creditor_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "588793d0-d5ae-4c16-9768-af1e5e464def",
          "name": "/creditor/<int:creditor_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea928767-c202-4637-ba4d-e891f5484a17",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests['is_active is true'] = jsonData.creditor.is_active;",
                  "",
                  "tests['creditor_name is new_test_cr'] = jsonData.creditor.creditor_name === \"new_test_cr\";",
                  "",
                  "tests['phone_number is 456-7890'] = jsonData.creditor.phone_number === \"456-7890\";",
                  "",
                  "tests['eamil is test@new_test_cr.com'] = jsonData.creditor.email === \"test@new_test_cr.com\";",
                  "",
                  "tests['organization_id is correct'] = jsonData.creditor.organization_id === parseInt(environment.organization_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Creditor updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"creditor_name\": \"new_test_cr\",\n  \"phone_number\": \"456-7890\",\n  \"email\": \"test@new_test_cr.com\",\n  \"organization_id\": {{organization_id}}\n}"
            },
            "url": "{{url}}/creditor/{{creditor_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "93345221-3b8d-4113-9366-23ad9d5cdff9",
          "name": "/creditor/<int:creditor_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "84cbdb9c-2aa0-40b6-86dd-0abe06df3c2d",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Creditor is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/creditor/{{creditor_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "e437130d-a8af-4614-8486-a4ad694bdc18",
          "name": "/activate_creditor/<int:creditor_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11b4bb94-c501-4641-b068-a089dc60125c",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Creditor is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_creditor/{{creditor_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "00d7e036-8d38-44aa-88fc-6810dddd5cd4",
      "name": "Deduction Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "28811a4e-3684-48e8-b2eb-9da7d1e552e3",
          "name": "/deduction",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "029d8406-5a3e-4332-9ac6-654dba83fb9f",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"deduction_id\", jsonData.deduction.id);",
                  "",
                  "tests[\"start_date is 2018-01-01\"] = jsonData.deduction.start_date === \"2018-01-01\";",
                  "",
                  "tests[\"end_date is 2018-01-31\"] = jsonData.deduction.end_date === \"2018-01-31\";",
                  "",
                  "tests[\"deduction_per_payment_period is 123.45\"] = jsonData.deduction.deduction_per_payment_period === \"123.45\";",
                  "",
                  "tests[\"payment_method is Cheque\"] = jsonData.deduction.payment_method === \"Cheque\";",
                  "",
                  "tests[\"deduct_in_december is true\"] = jsonData.deduction.deduct_in_december;",
                  "",
                  "tests[\"is_active is true\"] = jsonData.deduction.is_active;",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.deduction.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"creditor_id is correct\"] = jsonData.deduction.creditor_id ===  parseInt(environment.creditor_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"start_date\": \"2018-01-01\",\r\n\t\"end_date\": \"2018-01-31\",\r\n\t\"deduction_per_payment_period\": \"123.45\",\r\n\t\"payment_method\": \"Cheque\",\r\n\t\"deduct_in_december\": true,\r\n\t\"is_active\": true,\r\n\t\"employee_id\": {{employee_id}},\r\n\t\"creditor_id\": {{creditor_id}}\r\n}"
            },
            "url": "{{url}}/deduction"
          },
          "response": []
        },
        {
          "_postman_id": "01c9997f-304a-4418-bbef-18eb5dce63f5",
          "name": "/deduction/<int:deduction_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd68c16e-7b30-4aa2-9685-53c7c450156a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"start_date is 2018-01-01\"] = jsonData.start_date === \"2018-01-01\";",
                  "",
                  "tests[\"end_date is 2018-01-31\"] = jsonData.end_date === \"2018-01-31\";",
                  "",
                  "tests[\"deduction_per_payment_period is 123.45\"] = jsonData.deduction_per_payment_period === \"123.45\";",
                  "",
                  "tests[\"payment_method is Cheque\"] = jsonData.payment_method === \"Cheque\";",
                  "",
                  "tests[\"deduct_in_december is true\"] = jsonData.deduct_in_december;",
                  "",
                  "tests[\"is_active is true\"] = jsonData.is_active;",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"creditor_id is correct\"] = jsonData.creditor_id ===  parseInt(environment.creditor_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/deduction/{{deduction_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "3f218b3e-adf4-4c2d-b3b4-03378a3515b5",
          "name": "/deduction/<int:deduction_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5a19856-9779-45b6-8e0d-5ea13ce63a49",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"start_date is 2018-02-01\"] = jsonData.deduction.start_date === \"2018-02-01\";",
                  "",
                  "tests[\"end_date is 2018-02-28\"] = jsonData.deduction.end_date === \"2018-02-28\";",
                  "",
                  "tests[\"deduction_per_payment_period is 45.67\"] = jsonData.deduction.deduction_per_payment_period === \"45.67\";",
                  "",
                  "tests[\"payment_method is Efectivo\"] = jsonData.deduction.payment_method === \"Efectivo\";",
                  "",
                  "tests[\"deduct_in_december is fasle\"] = !jsonData.deduction.deduct_in_december;",
                  "",
                  "tests[\"is_active is true\"] = jsonData.deduction.is_active;",
                  "",
                  "tests[\"employee_id is correct\"] = jsonData.deduction.employee_id ===  parseInt(environment.employee_id);",
                  "",
                  "tests[\"creditor_id is correct\"] = jsonData.deduction.creditor_id ===  parseInt(environment.creditor_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"start_date\": \"2018-02-01\",\r\n\t\"end_date\": \"2018-02-28\",\r\n\t\"deduction_per_payment_period\": 45.67,\r\n\t\"payment_method\": \"Efectivo\",\r\n\t\"deduct_in_december\": false,\r\n\t\"is_active\": true,\r\n\t\"employee_id\": {{employee_id}},\r\n\t\"creditor_id\": {{creditor_id}}\r\n}"
            },
            "url": "{{url}}/deduction/{{deduction_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "e3867b3b-5ba3-4c3a-9a98-a985c60f738f",
          "name": "/deduction/<int:deduction_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c463662-88e9-413b-84be-48cd11a85dcf",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction is now inactive.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/deduction/{{deduction_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "0a7b6ed2-6788-4ac6-9dfd-b348828d6f0b",
          "name": "/activate_deduction/<int:deduction_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "de3e2f25-9e84-47e8-a98a-d1ad52f3a97a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction is now active.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/activate_deduction/{{deduction_id}}"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "ba70221a-599a-42ab-aeec-9ca00b2f92dd",
      "name": "DeductionDetail Resource",
      "description": "",
      "item": [
        {
          "_postman_id": "2b6fedf1-d14d-4b27-bbb8-1bb6ce927c4c",
          "name": "/deduction_detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e2e491c-7ae4-4fbf-bfbf-ff3f1cba9f5b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "postman.setEnvironmentVariable(\"deduction_detail_id\", jsonData.deduction_detail.id);",
                  "",
                  "tests[\"deducted_amount is 67.89\"] = jsonData.deduction_detail.deducted_amount === \"67.89\";",
                  "",
                  "tests[\"payment_id is correct\"] = jsonData.deduction_detail.payment_id ===  parseInt(environment.payment_id);",
                  "",
                  "tests[\"deduction_id is correct\"] = jsonData.deduction_detail.deduction_id ===  parseInt(environment.deduction_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction deatil created successfully.\";",
                  "",
                  "tests[\"Successful POST request\"] = responseCode.code === 201;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < 500;",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"deducted_amount\": \"67.89\",\r\n\t\"payment_id\": {{payment_id}},\r\n\t\"deduction_id\": {{deduction_id}}\r\n}"
            },
            "url": "{{url}}/deduction_detail"
          },
          "response": []
        },
        {
          "_postman_id": "af5fea21-c578-44ca-a408-762b4ef48028",
          "name": "/deduction_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9813513-cd22-46bd-9540-d7a854af421a",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"deducted_amount is 67.89\"] = jsonData.deducted_amount === \"67.89\";",
                  "",
                  "tests[\"payment_id is correct\"] = jsonData.payment_id ===  parseInt(environment.payment_id);",
                  "",
                  "tests[\"deduction_id is correct\"] = jsonData.deduction_id ===  parseInt(environment.deduction_id);",
                  "",
                  "tests[\"Successful GET request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"jfeliu\", \n  \"password\": \"1234\",\n  \"organization_id\": 1\n  \"is_super\": True,\n  \"is_owner\": True,\n  \"is_active\": True\n}"
            },
            "url": "{{url}}/deduction_detail/{{deduction_detail_id}}",
            "description": "Register a new user supplying a \"username\" and \"password\""
          },
          "response": []
        },
        {
          "_postman_id": "60b0f9aa-f1f4-49bb-ab7f-3b83f4a88bda",
          "name": "/deduction_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c31249d6-b3a6-4b10-9cd8-3bbf6219401b",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"deducted_amount is 89.01\"] = jsonData.deduction_detail.deducted_amount === \"89.01\";",
                  "",
                  "tests[\"payment_id is correct\"] = jsonData.deduction_detail.payment_id ===  parseInt(environment.payment_id);",
                  "",
                  "tests[\"deduction_id is correct\"] = jsonData.deduction_detail.deduction_id ===  parseInt(environment.deduction_id);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction detail updated successfully.\";",
                  "",
                  "tests[\"Successful PUT request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"deducted_amount\": \"89.01\",\r\n\t\"payment_id\": {{payment_id}},\r\n\t\"deduction_id\": {{deduction_id}}\r\n}"
            },
            "url": "{{url}}/deduction_detail/{{deduction_detail_id}}"
          },
          "response": []
        },
        {
          "_postman_id": "b3272828-0d15-4a21-994e-b7593916357f",
          "name": "/deduction_detail/<int:detail_id>",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f1a19853-8d03-497b-bbb7-9d24d878defc",
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Success message returned\"] = jsonData.message === \"Deduction detail deleted.\";",
                  "",
                  "tests[\"Successful DELETE request\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Response time is less than 500 ms\"] = responseTime < parseInt(environment.responseTime);",
                  "",
                  "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
                  "",
                  "tests[\"Content-Type is application/json\"] = postman.getResponseHeader(\"Content-Type\") === \"application/json\";"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "JWT {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{url}}/deduction_detail/{{deduction_detail_id}}"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "179262d0-7211-46b7-8637-f3d6e044ffc5",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "af2021d8-1822-459a-b58a-ad33773adef0",
        "type": "text/javascript",
        "exec": [
          "var responseTime = pm.environment.get(\"responseTime\");",
          "",
          "pm.test(\"Response time is less than \" + responseTime, function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(parseInt(responseTime));",
          "});",
          "",
          "pm.test(\"Successful request\", function() {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
          "});",
          "",
          "pm.test(\"Content-Type is present\", function () {",
          "    pm.response.to.have.header(\"Content-Type\");",
          "});",
          "",
          "pm.test(\"Content-Type is application/json\", function () {",
          "    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
          "});"
        ]
      }
    }
  ]
}